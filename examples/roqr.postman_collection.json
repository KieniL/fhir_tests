{
	"info": {
		"_postman_id": "c87ffeae-4efc-43f0-9e84-654e300e0f63",
		"name": "roqr",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "fhir-api-service",
			"item": [
				{
					"name": "crud",
					"item": [
						{
							"name": "Can create an Organization resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65282cbb-c6e9-4b48-9692-7a433c4bdcb3",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create an Organization resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create an Organization resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Organization\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create an Organization resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_organization_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create an Organization resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create an Organization resource - Location header is present and in correct format /Organization/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Organization/\" + pm.environment.get(\"fhir_created_organization_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/fhir+json",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"resourceType\": \"Organization\",\n            \"meta\": {\n                \"profile\": [\n                    \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Organization-1\"\n                ]\n            },\n            \"identifier\": [\n                {\n                    \"system\": \"https://fhir.nhs.uk/Id/ods-organization-code\",\n                    \"value\": \"03X\"\n                }\n            ],\n            \"type\": [\n                {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://hl7.org/fhir/organization-type\",\n                            \"code\": \"prov\",\n                            \"display\": \"Healthcare Provider\"\n                        }\n                    ]\n                }\n            ],\n            \"name\": \"NHS EREWASH\",\n            \"address\": [\n                {\n                    \"use\": \"work\",\n                    \"type\": \"both\",\n                    \"line\": [\n                        \"Toll Bar House\",\n                        \"1 Derby Road\"\n                    ],\n                    \"city\": \"Ilkeston\",\n                    \"district\": \"Derbyshire\",\n                    \"postalCode\": \"DE7 5FH\"\n                }\n            ]\n        }"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Organization",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Organization"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can read an Organization resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Read FHIR Organization Resource - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Read FHIR Organization Resource - resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Organization\");",
											"});",
											"//Resource id is equal to the created resource id",
											"pm.test(\"Can Read FHIR Organization Resource - resource id === server assigned resource id)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist &&",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"fhir_created_organization_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Organization/{{fhir_created_organization_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Organization",
										"{{fhir_created_organization_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Practitioner resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65282cbb-c6e9-4b48-9692-7a433c4bdcb3",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Practitioner resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Practitioner resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Practitioner\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Practitioner resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_practitioner_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Practitioner resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Practitioner resource - Location header is present and in correct format /Organization/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Practitioner/\" + pm.environment.get(\"fhir_created_practitioner_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Practitioner resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/fhir+json",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n                \"resourceType\": \"Practitioner\",\n                \"meta\": {\n                    \"profile\": [\n                        \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Practitioner-1\"\n                    ]\n                },\n                \"identifier\": [\n                    {\n                        \"system\": \"https://fhir.nhs.uk/Id/sds-user-id\",\n                        \"value\": \"G8133438\"\n                    }\n                ],\n                \"name\": [\n                    {\n                        \"family\": \"Bhatia\",\n                        \"given\": [\n                            \"AA\"\n                        ],\n                        \"prefix\": [\n                            \"Dr.\"\n                        ]\n                    }\n                ],\n                \"telecom\": [\n                    {\n                        \"system\": \"email\",\n                        \"value\": \"abhatia@nhs.skynet\",\n                        \"use\": \"work\"\n                    },\n                    {\n                        \"system\": \"phone\",\n                        \"value\": \"0115 9737320\",\n                        \"use\": \"work\"\n                    }\n                ],\n                \"address\": [\n                    {\n                        \"line\": [\n                            \"Regent Street\",\n                            \"Long Eaton\"\n                        ],\n                        \"city\": \"Nottingham\",\n                        \"district\": \"Derbyshire\",\n                        \"postalCode\": \"NG10 1QQ\"\n                    }\n                ],\n                \"gender\": \"male\"\n            }"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Practitioner",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Practitioner"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can read a Practitioner resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Read FHIR Practitioner Resource - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Read FHIR Practitioner Resource - resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Practitioner\");",
											"});",
											"//Resource id is equal to the created resource id",
											"pm.test(\"Can Read FHIR Practitioner Resource - resource id === server assigned resource id)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist &&",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"fhir_created_practitioner_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Practitioner/{{fhir_created_practitioner_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Practitioner",
										"{{fhir_created_practitioner_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Patient resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Patient resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Patient resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Patient resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_patient_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Patient resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Patient resource - Location header is present and in correct format /Patient/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_patient_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"identifier\": [{\r\n        \"extension\": [{\r\n            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                    \"code\": \"01\",\r\n                    \"display\": \"Number present and verified\"\r\n                }]\r\n            }\r\n        }],\r\n        \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n        \"value\": \"{{lastTestNHSNumber}}\"\r\n    }],\r\n    \"active\": true,\r\n    \"name\": [{\r\n        \"use\": \"official\",\r\n        \"family\": \"ZZZTEST\",\r\n        \"given\": [\r\n            \"ZZZ\"\r\n        ],\r\n        \"prefix\": [\r\n            \"ZZZ\"\r\n        ]\r\n    }],\r\n    \"gender\": \"female\",\r\n    \"birthDate\": \"1986-02-27\",\r\n    \"address\": [{\r\n        \"use\": \"home\",\r\n        \"type\": \"physical\"\r\n    }],\r\n    \"maritalStatus\": {\r\n        \"coding\": [{\r\n            \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n            \"code\": \"S\",\r\n            \"display\": \"Never Married\"\r\n        }]\r\n    },\r\n    \"generalPractitioner\": [{\r\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\r\n        \"display\": \"Mrs AA Bhatia\"\r\n    }],\r\n    \"managingOrganization\": {\r\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\r\n        \"display\": \"HSCIC test Practice\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can read a Patient resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Read FHIR Patient Resource - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Read FHIR Patient Resource - resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
											"});",
											"//Resource id is equal to the created resource id",
											"pm.test(\"Can Read FHIR Patient Resource - resource id === server assigned resource id)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist &&",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"fhir_created_patient_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient",
										"{{fhir_created_patient_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can read a Patient resource Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Read FHIR Patient Resource - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Read FHIR Patient Resource - resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
											"});",
											"//Resource id is equal to the created resource id",
											"pm.test(\"Can Read FHIR Patient Resource - resource id === server assigned resource id)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist &&",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"fhir_created_patient_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient",
										"{{fhir_created_patient_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can update a Patient resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Patient resource - 204 returned\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"//Response body is empty"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"id\":\"{{fhir_created_patient_id}}\",\r\n    \"identifier\": [{\r\n        \"extension\": [{\r\n            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                    \"code\": \"01\",\r\n                    \"display\": \"Number present and verified\"\r\n                }]\r\n            }\r\n        }],\r\n        \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n        \"value\": \"{{lastTestNHSNumber}}\"\r\n    }],\r\n    \"active\": true,\r\n    \"name\": [{\r\n        \"use\": \"official\",\r\n        \"family\": \"ZZZTESTUPDATE\",\r\n        \"given\": [\r\n            \"ZZZUPDATE\"\r\n        ],\r\n        \"prefix\": [\r\n            \"ZZZUPDATE\"\r\n        ]\r\n    }],\r\n    \"gender\": \"female\",\r\n    \"birthDate\": \"1986-02-27\",\r\n    \"address\": [{\r\n        \"use\": \"home\",\r\n        \"type\": \"physical\"\r\n    }],\r\n    \"maritalStatus\": {\r\n        \"coding\": [{\r\n            \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n            \"code\": \"S\",\r\n            \"display\": \"Never Married\"\r\n        }]\r\n    },\r\n    \"generalPractitioner\": [{\r\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\r\n        \"display\": \"Mrs AA Bhatia\"\r\n    }],\r\n    \"managingOrganization\": {\r\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\r\n        \"display\": \"HSCIC test Practice\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient",
										"{{fhir_created_patient_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can read a Patient resource after update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Read FHIR Patient Resource after an update - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Read FHIR Patient Resource after an update - resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
											"});",
											"//Resource id is equal to the created resource id",
											"pm.test(\"Can Read FHIR Patient Resource after an update - resource id === server assigned resource id)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist &&",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"fhir_created_patient_id\"));",
											"});",
											"//Did the updates \"stick\" (persist)",
											"pm.test(\"Can Read FHIR Patient Resource after an update - Did the updates stick?\", function () {",
											"    var jsonData = pm.response.json();",
											"    var name = jsonData.name;",
											"    pm.expect(name.length).to.eql(1) && ",
											"        pm.expect(name[0].family).to.eql(\"ZZZTESTUPDATE\") && ",
											"            pm.expect(name[0].given[0]).to.eql(\"ZZZUPDATE\") &&  ",
											"                pm.expect(name[0].prefix[0]).to.eql(\"ZZZUPDATE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient",
										"{{fhir_created_patient_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can delete a patient resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Read FHIR Patient Resource - 202 returned\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient",
										"{{fhir_created_patient_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cannot read a patient resource after delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Cannot Read a FHIR Patient Resource after delete - 404 returned\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"//Resource is returned in body - operation outcome",
											"pm.test(\"Cannot Read a FHIR Patient Resource after delete - OperationOutcome is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"OperationOutcome\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient",
										"{{fhir_created_patient_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an Encounter resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create an Encounter resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create an Encounter resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Encounter\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create an Encounter resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_encounter_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create an Organization resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create an Encounter resource - Location header is present and in correct format /Encounter/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Encounter/\" + pm.environment.get(\"fhir_created_encounter_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Encounter resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Encounter\",\n    \"meta\": {\n        \"profile\": [\n            \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Encounter-1\"\n        ]\n    },\n    \"identifier\": [\n        {\n            \"system\": \"https://tools.ietf.org/html/rfc4122\",\n            \"value\": \"db00be4b-2f33-4cc3-8eff-4a57e56b185b\"\n        }\n    ],\n    \"status\": \"finished\",\n    \"class\": {\n        \"system\": \"http://hl7.org/fhir/v3/ActCode\",\n        \"code\": \"IMP\",\n        \"display\": \"inpatient encounter\"\n    },\n    \"subject\": {\n        \"reference\": \"Patient/{{fhir_created_patient_id}}\"\n    },\n    \"participant\": [\n        {\n            \"type\": [\n                {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://hl7.org/fhir/v3/ParticipationType\",\n                            \"code\": \"DIS\",\n                            \"display\": \"discharger\"\n                        }\n                    ]\n                }\n            ],\n            \"individual\": {\n                \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\n                \"display\": \"Mrs AA Bhatia\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Encounter",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Encounter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can read an Encounter resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Read FHIR Encounter Resource - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Read FHIR Encounter Resource - resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Encounter\");",
											"});",
											"//Resource id is equal to the created resource id",
											"pm.test(\"Can Read FHIR Encounter Resource - resource id === server assigned resource id)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist &&",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"fhir_created_encounter_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Encounter/{{fhir_created_encounter_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Encounter",
										"{{fhir_created_encounter_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a PractitionerRole resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65282cbb-c6e9-4b48-9692-7a433c4bdcb3",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create a PractitionerRole resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create a PractitionerRole resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"PractitionerRole\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create a PractitionerRole resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_practitioner_role_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create a PractitionerRole resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create a PractitionerRole resource - Location header is present and in correct format /Organization/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/PractitionerRole/\" + pm.environment.get(\"fhir_created_practitioner_role_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create a PractitionerRole resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"PractitionerRole\",\n    \"practitioner\": {\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\n        \"display\": \"Dr. AA Bhatia\"\n    },\n    \"organization\": {\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\n        \"display\": \"NHS EREWASH\"\n    },\n    \"code\": [\n        {\n            \"coding\": [\n                {\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-SDSJobRoleName-1\",\n                    \"code\": \"R0260\",\n                    \"display\": \"General Medical Practitioner\"\n                }\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/PractitionerRole",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"PractitionerRole"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scratch",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65282cbb-c6e9-4b48-9692-7a433c4bdcb3",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Practitioner resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Practitioner resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Practitioner\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Practitioner resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_practitioner_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Practitioner resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Practitioner resource - Location header is present and in correct format /Organization/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Practitioner/\" + pm.environment.get(\"fhir_created_practitioner_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Practitioner resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://data.developer.nhs.uk/ccri-fhir/STU3/Patient?name=janice",
									"protocol": "https",
									"host": [
										"data",
										"developer",
										"nhs",
										"uk"
									],
									"path": [
										"ccri-fhir",
										"STU3",
										"Patient"
									],
									"query": [
										{
											"key": "name",
											"value": "janice"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "search",
					"item": [
						{
							"name": "Can create an Organization resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65282cbb-c6e9-4b48-9692-7a433c4bdcb3",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create an Organization resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create an Organization resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Organization\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create an Organization resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_organization_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create an Organization resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create an Organization resource - Location header is present and in correct format /Organization/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Organization/\" + pm.environment.get(\"fhir_created_organization_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/fhir+json",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"resourceType\": \"Organization\",\n            \"meta\": {\n                \"profile\": [\n                    \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Organization-1\"\n                ]\n            },\n            \"identifier\": [\n                {\n                    \"system\": \"https://fhir.nhs.uk/Id/ods-organization-code\",\n                    \"value\": \"03X\"\n                }\n            ],\n            \"type\": [\n                {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://hl7.org/fhir/organization-type\",\n                            \"code\": \"prov\",\n                            \"display\": \"Healthcare Provider\"\n                        }\n                    ]\n                }\n            ],\n            \"name\": \"NHS EREWASH\",\n            \"address\": [\n                {\n                    \"use\": \"work\",\n                    \"type\": \"both\",\n                    \"line\": [\n                        \"Toll Bar House\",\n                        \"1 Derby Road\"\n                    ],\n                    \"city\": \"Ilkeston\",\n                    \"district\": \"Derbyshire\",\n                    \"postalCode\": \"DE7 5FH\"\n                }\n            ]\n        }"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Organization",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Organization"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Policy resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65282cbb-c6e9-4b48-9692-7a433c4bdcb3",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create a Policy resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create a Policy resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Policy\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create a Policy resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_policy_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create an Organization resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create an Organization resource - Location header is present and in correct format /Policy/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Policy/\" + pm.environment.get(\"fhir_created_policy_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Policy resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Policy\",\n    \"status\": \"active\",\n    \"name\": \"Test Helm Privacy 13\",\n    \"narrative\": \"###text body ###\",\n    \"basis\": \"inclusive\",\n    \"scope\": \"global\",\n    \"action\": \"nothing\",\n    \"rule\": [\n        {\n            \"access\": {\n                \"organization\": {\n                    \"reference\": \"Organization/{{fhir_created_organization_id}}\"\n                }\n            },\n            \"data\": [\n                {\n                    \"resource\": \"Patient\"\n                }\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Policy",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Policy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Terms Policy resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65282cbb-c6e9-4b48-9692-7a433c4bdcb3",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create a Terms Policy resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create an Organization resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Policy\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create a Terms Policy resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_terms_policy_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create a Terms Policy resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create a Terms Policy resource - Location header is present and in correct format /Policy/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Policy/\" + pm.environment.get(\"fhir_created_terms_policy_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Terms Policy resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"action\": \"nothing\",\n    \"basis\": \"inclusive\",\n    \"name\": \"Test Helm Terms 1\",\n    \"resourceType\": \"Policy\",\n    \"rule\": [\n        {\n            \"access\": {\n                \"organization\": {\n                    \"reference\": \"Organization/{{fhir_created_organization_id}}\"\n                }\n            },\n            \"data\": [\n                {\n                    \"resource\": \"Patient\"\n                }\n            ]\n        }\n    ],\n    \"scope\": \"global\",\n    \"status\": \"active\"\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Policy",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Policy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Policy by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Policy by name - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Policy by name - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a policy...",
											"pm.test(\"Can search for Policy by name - 1 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1) && ",
											"        pm.expect(jsonData.entry[0].resource.resourceType).to.eql(\"Policy\");",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can search for Policy by name - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can search for Policy by name - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Policy by name - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Entry search mode for each Location is set to \"match\"",
											"pm.test(\"Can search for Policy by name - search mode for each policy resource === 'match'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Policy') {",
											"            pm.expect(entry.search.mode).to.eql('match');  ",
											"         }",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Policy?name:exact=Test Helm Privacy 13",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Policy"
									],
									"query": [
										{
											"key": "name:exact",
											"value": "Test Helm Privacy 13"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Terms Policy by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Terms Policy by name - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Terms Policy by name - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a policy...",
											"pm.test(\"Can search for Terms Policy by name - 1 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1) && ",
											"        pm.expect(jsonData.entry[0].resource.resourceType).to.eql(\"Policy\");",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can search for Terms Policy by name - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can search for Terms Policy by name - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Terms Policy by name - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Entry search mode for each Location is set to \"match\"",
											"pm.test(\"Can search for Terms Policy by name - search mode for each policy resource === 'match'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Policy') {",
											"            pm.expect(entry.search.mode).to.eql('match');  ",
											"         }",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Policy?name:exact=Test Helm Terms 1",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Policy"
									],
									"query": [
										{
											"key": "name:exact",
											"value": "Test Helm Terms 1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Location resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65282cbb-c6e9-4b48-9692-7a433c4bdcb3",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create a Location resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create a Location resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Location\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create a Location resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_location_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create a Location resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create a Location resource - Location header is present and in correct format /Location/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Location/\" + pm.environment.get(\"fhir_created_location_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Location resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n                \"resourceType\": \"Location\",\n                \"meta\": {\n                    \"profile\": [\n                        \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Location-1\"\n                    ]\n                },\n                \"identifier\": [\n                    {\n                        \"use\": \"usual\",\n                        \"system\": \"https://fhir.nhs.uk/Id/ods-site-code\",\n                        \"value\": \"RTG08\"\n                    }\n                ],\n                \"name\": \"Long Eaton Clinic\",\n                \"type\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://hl7.org/fhir/v3/RoleCode\",\n                            \"code\": \"CSC\",\n                            \"display\": \"community service center\"\n                        }\n                    ]\n                },\n                \"telecom\": [\n                    {\n                        \"system\": \"phone\",\n                        \"value\": \"0115 855 4034\",\n                        \"use\": \"work\"\n                    },\n                    {\n                        \"system\": \"fax\",\n                        \"value\": \"0532 123 4567\",\n                        \"use\": \"work\"\n                    }\n                ],\n                \"address\": {\n                    \"use\": \"home\",\n                    \"type\": \"postal\",\n                    \"line\": [\n                        \"Midland Street\",\n                        \"Long Eaton\"\n                    ],\n                    \"city\": \"Nottingham\",\n                    \"district\": \"Derbyshire\",\n                    \"postalCode\": \"NG10 1RY\"\n                },\n                \"physicalType\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://hl7.org/fhir/location-physical-type\",\n                            \"code\": \"bu\",\n                            \"display\": \"Building\"\n                        }\n                    ]\n                },\n                \"managingOrganization\": {\n                    \"reference\": \"Organization/{{fhir_created_organization_id}}\",\n                    \"display\": \"Derby Teaching Hospitals NHS Foundation Trust\"\n                }\n            }"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Location",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Location"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Practitioner resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65282cbb-c6e9-4b48-9692-7a433c4bdcb3",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Practitioner resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Practitioner resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Practitioner\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Practitioner resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_practitioner_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Practitioner resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Practitioner resource - Location header is present and in correct format /Organization/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Practitioner/\" + pm.environment.get(\"fhir_created_practitioner_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Practitioner resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/fhir+json",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n                \"resourceType\": \"Practitioner\",\n                \"meta\": {\n                    \"profile\": [\n                        \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Practitioner-1\"\n                    ]\n                },\n                \"identifier\": [\n                    {\n                        \"system\": \"https://fhir.nhs.uk/Id/sds-user-id\",\n                        \"value\": \"G8133438\"\n                    }\n                ],\n                \"name\": [\n                    {\n                        \"family\": \"Bhatia\",\n                        \"given\": [\n                            \"AA\"\n                        ],\n                        \"prefix\": [\n                            \"Dr.\"\n                        ]\n                    }\n                ],\n                \"telecom\": [\n                    {\n                        \"system\": \"email\",\n                        \"value\": \"abhatia@nhs.skynet\",\n                        \"use\": \"work\"\n                    },\n                    {\n                        \"system\": \"phone\",\n                        \"value\": \"0115 9737320\",\n                        \"use\": \"work\"\n                    }\n                ],\n                \"address\": [\n                    {\n                        \"line\": [\n                            \"Regent Street\",\n                            \"Long Eaton\"\n                        ],\n                        \"city\": \"Nottingham\",\n                        \"district\": \"Derbyshire\",\n                        \"postalCode\": \"NG10 1QQ\"\n                    }\n                ],\n                \"gender\": \"male\"\n            }"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Practitioner",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Practitioner"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a PractitionerRole resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65282cbb-c6e9-4b48-9692-7a433c4bdcb3",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create a PractitionerRole resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create a PractitionerRole resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"PractitionerRole\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create a PractitionerRole resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_practitioner_role_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create a PractitionerRole resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create a PractitionerRole resource - Location header is present and in correct format /Organization/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/PractitionerRole/\" + pm.environment.get(\"fhir_created_practitioner_role_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create a PractitionerRole resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"PractitionerRole\",\n    \"practitioner\": {\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\n        \"display\": \"Dr. AA Bhatia\"\n    },\n    \"organization\": {\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\n        \"display\": \"NHS EREWASH\"\n    },\n    \"code\": [\n        {\n            \"coding\": [\n                {\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-SDSJobRoleName-1\",\n                    \"code\": \"R0260\",\n                    \"display\": \"General Medical Practitioner\"\n                }\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/PractitionerRole",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"PractitionerRole"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Patient resource ZZZWIGHT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Patient resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Patient resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Patient resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_patient_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Patient resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Patient resource - Location header is present and in correct format /Patient/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_patient_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"identifier\": [{\r\n        \"extension\": [{\r\n            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                    \"code\": \"01\",\r\n                    \"display\": \"Number present and verified\"\r\n                }]\r\n            }\r\n        }],\r\n        \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n        \"value\": \"{{lastTestNHSNumber}}\"\r\n    }],\r\n    \"active\": true,\r\n    \"name\": [{\r\n        \"use\": \"official\",\r\n        \"family\": \"WIGHT\",\r\n        \"given\": [\r\n            \"ZZZ\"\r\n        ],\r\n        \"prefix\": [\r\n            \"ZZZ\"\r\n        ]\r\n    }],\r\n    \"gender\": \"female\",\r\n    \"birthDate\": \"1986-02-27\",\r\n    \"address\": [{\r\n        \"use\": \"home\",\r\n        \"type\": \"physical\"\r\n    }],\r\n    \"maritalStatus\": {\r\n        \"coding\": [{\r\n            \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n            \"code\": \"S\",\r\n            \"display\": \"Never Married\"\r\n        }]\r\n    },\r\n    \"generalPractitioner\": [{\r\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\r\n        \"display\": \"Mrs AA Bhatia\"\r\n    }],\r\n    \"managingOrganization\": {\r\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\r\n        \"display\": \"HSCIC test Practice\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Patient resource AAALANNISTER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Patient resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Patient resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Patient resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_patient_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Patient resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Patient resource - Location header is present and in correct format /Patient/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_patient_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"identifier\": [{\r\n        \"extension\": [{\r\n            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                    \"code\": \"01\",\r\n                    \"display\": \"Number present and verified\"\r\n                }]\r\n            }\r\n        }],\r\n        \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n        \"value\": \"{{lastTestNHSNumber}}\"\r\n    }],\r\n    \"active\": true,\r\n    \"name\": [{\r\n        \"use\": \"official\",\r\n        \"family\": \"LANNISTER\",\r\n        \"given\": [\r\n            \"AAA\"\r\n        ],\r\n        \"prefix\": [\r\n            \"AAA\"\r\n        ]\r\n    }],\r\n    \"gender\": \"female\",\r\n    \"birthDate\": \"1983-01-27\",\r\n    \"address\": [{\r\n        \"use\": \"home\",\r\n        \"type\": \"physical\"\r\n    }],\r\n    \"maritalStatus\": {\r\n        \"coding\": [{\r\n            \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n            \"code\": \"S\",\r\n            \"display\": \"Never Married\"\r\n        }]\r\n    },\r\n    \"generalPractitioner\": [{\r\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\r\n        \"display\": \"Mrs AA Bhatia\"\r\n    }],\r\n    \"managingOrganization\": {\r\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\r\n        \"display\": \"HSCIC test Practice\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Patient resource BBBTARGARYEN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Patient resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Patient resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Patient resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_patient_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Patient resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Patient resource - Location header is present and in correct format /Patient/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_patient_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"identifier\": [{\r\n        \"extension\": [{\r\n            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                    \"code\": \"01\",\r\n                    \"display\": \"Number present and verified\"\r\n                }]\r\n            }\r\n        }],\r\n        \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n        \"value\": \"{{lastTestNHSNumber}}\"\r\n    }],\r\n    \"active\": true,\r\n    \"name\": [{\r\n        \"use\": \"official\",\r\n        \"family\": \"TARGARYEN\",\r\n        \"given\": [\r\n            \"BBB\"\r\n        ],\r\n        \"prefix\": [\r\n            \"BBB\"\r\n        ]\r\n    }],\r\n    \"gender\": \"male\",\r\n    \"birthDate\": \"1978-02-13\",\r\n    \"address\": [{\r\n        \"use\": \"home\",\r\n        \"type\": \"physical\"\r\n    }],\r\n    \"maritalStatus\": {\r\n        \"coding\": [{\r\n            \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n            \"code\": \"S\",\r\n            \"display\": \"Never Married\"\r\n        }]\r\n    },\r\n    \"generalPractitioner\": [{\r\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\r\n        \"display\": \"Mrs AA Bhatia\"\r\n    }],\r\n    \"managingOrganization\": {\r\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\r\n        \"display\": \"HSCIC test Practice\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Patient resource CCCSTARK",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Patient resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Patient resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Patient resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_patient_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Patient resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Patient resource - Location header is present and in correct format /Patient/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_patient_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"identifier\": [{\r\n        \"extension\": [{\r\n            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                    \"code\": \"01\",\r\n                    \"display\": \"Number present and verified\"\r\n                }]\r\n            }\r\n        }],\r\n        \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n        \"value\": \"{{lastTestNHSNumber}}\"\r\n    }],\r\n    \"active\": true,\r\n    \"name\": [{\r\n        \"use\": \"official\",\r\n        \"family\": \"STARK\",\r\n        \"given\": [\r\n            \"CCC\"\r\n        ],\r\n        \"prefix\": [\r\n            \"CCC\"\r\n        ]\r\n    }],\r\n    \"gender\": \"male\",\r\n    \"birthDate\": \"1989-10-15\",\r\n    \"address\": [{\r\n        \"use\": \"home\",\r\n        \"type\": \"physical\"\r\n    }],\r\n    \"maritalStatus\": {\r\n        \"coding\": [{\r\n            \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n            \"code\": \"S\",\r\n            \"display\": \"Never Married\"\r\n        }]\r\n    },\r\n    \"generalPractitioner\": [{\r\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\r\n        \"display\": \"Mrs AA Bhatia\"\r\n    }],\r\n    \"managingOrganization\": {\r\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\r\n        \"display\": \"HSCIC test Practice\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Patient resource DDDBARATHEON",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Patient resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Patient resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Patient resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_patient_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Patient resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Patient resource - Location header is present and in correct format /Patient/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_patient_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"identifier\": [{\r\n        \"extension\": [{\r\n            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                    \"code\": \"01\",\r\n                    \"display\": \"Number present and verified\"\r\n                }]\r\n            }\r\n        }],\r\n        \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n        \"value\": \"{{lastTestNHSNumber}}\"\r\n    }],\r\n    \"active\": true,\r\n    \"name\": [{\r\n        \"use\": \"official\",\r\n        \"family\": \"BARATHEON\",\r\n        \"given\": [\r\n            \"DDD\"\r\n        ],\r\n        \"prefix\": [\r\n            \"DDD\"\r\n        ]\r\n    }],\r\n    \"gender\": \"male\",\r\n    \"birthDate\": \"1981-11-12\",\r\n    \"address\": [{\r\n        \"use\": \"home\",\r\n        \"type\": \"physical\"\r\n    }],\r\n    \"maritalStatus\": {\r\n        \"coding\": [{\r\n            \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n            \"code\": \"S\",\r\n            \"display\": \"Never Married\"\r\n        }]\r\n    },\r\n    \"generalPractitioner\": [{\r\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\r\n        \"display\": \"Mrs AA Bhatia\"\r\n    }],\r\n    \"managingOrganization\": {\r\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\r\n        \"display\": \"HSCIC test Practice\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Patient resource EEEGREYJOY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Patient resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Patient resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Patient resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_patient_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Patient resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Patient resource - Location header is present and in correct format /Patient/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_patient_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"identifier\": [{\r\n        \"extension\": [{\r\n            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                    \"code\": \"01\",\r\n                    \"display\": \"Number present and verified\"\r\n                }]\r\n            }\r\n        }],\r\n        \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n        \"value\": \"{{lastTestNHSNumber}}\"\r\n    }],\r\n    \"active\": true,\r\n    \"name\": [{\r\n        \"use\": \"official\",\r\n        \"family\": \"GREYJOY\",\r\n        \"given\": [\r\n            \"EEE\"\r\n        ],\r\n        \"prefix\": [\r\n            \"EEE\"\r\n        ]\r\n    }],\r\n    \"gender\": \"female\",\r\n    \"birthDate\": \"1995-04-05\",\r\n    \"address\": [{\r\n        \"use\": \"home\",\r\n        \"type\": \"physical\"\r\n    }],\r\n    \"maritalStatus\": {\r\n        \"coding\": [{\r\n            \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n            \"code\": \"S\",\r\n            \"display\": \"Never Married\"\r\n        }]\r\n    },\r\n    \"generalPractitioner\": [{\r\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\r\n        \"display\": \"Mrs AA Bhatia\"\r\n    }],\r\n    \"managingOrganization\": {\r\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\r\n        \"display\": \"HSCIC test Practice\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Patient resource Michael",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Patient resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Patient resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Patient resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_patient_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Patient resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Patient resource - Location header is present and in correct format /Patient/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_patient_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"identifier\": [{\r\n        \"extension\": [{\r\n            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                    \"code\": \"01\",\r\n                    \"display\": \"Number present and verified\"\r\n                }]\r\n            }\r\n        }],\r\n        \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n        \"value\": \"{{lastTestNHSNumber}}\"\r\n    },\r\n    {\r\n    \t\"system\": \"https://data.developer.nhs.uk/ccri-fhir/id\",\r\n        \"value\": \"1182\"\r\n    }],\r\n    \"active\": true,\r\n    \"name\": [{\r\n        \"use\": \"official\",\r\n        \"family\": \"ZZZTEST\",\r\n        \"given\": [\r\n            \"MICHAEL\"\r\n        ],\r\n        \"prefix\": [\r\n            \"MR\"\r\n        ]\r\n    }],\r\n    \"gender\": \"male\",\r\n    \"birthDate\": \"1980-04-05\",\r\n    \"address\": [{\r\n        \"use\": \"home\",\r\n        \"type\": \"physical\"\r\n    }],\r\n    \"maritalStatus\": {\r\n        \"coding\": [{\r\n            \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n            \"code\": \"S\",\r\n            \"display\": \"Never Married\"\r\n        }]\r\n    },\r\n    \"generalPractitioner\": [{\r\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\r\n        \"display\": \"Mrs AA Bhatia\"\r\n    }],\r\n    \"managingOrganization\": {\r\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\r\n        \"display\": \"HSCIC test Practice\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an Encounter resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create an Encounter resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create an Encounter resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Encounter\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create an Encounter resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_encounter_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create an Organization resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create an Encounter resource - Location header is present and in correct format /Encounter/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Encounter/\" + pm.environment.get(\"fhir_created_encounter_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Encounter resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Encounter\",\n    \"meta\": {\n        \"profile\": [\n            \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Encounter-1\"\n        ]\n    },\n    \"identifier\": [\n        {\n            \"system\": \"https://tools.ietf.org/html/rfc4122\",\n            \"value\": \"db00be4b-2f33-4cc3-8eff-4a57e56b185b\"\n        }\n    ],\n    \"status\": \"finished\",\n    \"class\": {\n        \"system\": \"http://hl7.org/fhir/v3/ActCode\",\n        \"code\": \"IMP\",\n        \"display\": \"inpatient encounter\"\n    },\n    \"subject\": {\n        \"reference\": \"Patient/{{fhir_created_patient_id}}\",\n        \"identifier\": {\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\"value\":\"{{lastTestNHSNumber}}\"}\n    },\n    \"participant\": [\n        {\n            \"type\": [\n                {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://hl7.org/fhir/v3/ParticipationType\",\n                            \"code\": \"DIS\",\n                            \"display\": \"discharger\"\n                        }\n                    ]\n                }\n            ],\n            \"individual\": {\n                \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\n                \"display\": \"Mrs AA Bhatia\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Encounter",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Encounter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an Encounter resource status === arrived",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create an Encounter resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create an Encounter resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Encounter\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create an Encounter resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_encounter_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create an Organization resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create an Encounter resource - Location header is present and in correct format /Encounter/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Encounter/\" + pm.environment.get(\"fhir_created_encounter_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Encounter resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Encounter\",\n    \"meta\": {\n        \"profile\": [\n            \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Encounter-1\"\n        ]\n    },\n    \"identifier\": [\n        {\n            \"system\": \"https://tools.ietf.org/html/rfc4122\",\n            \"value\": \"db00be4b-2f33-4cc3-8eff-4a57e56b185b\"\n        }\n    ],\n    \"status\": \"arrived\",\n    \"class\": {\n        \"system\": \"http://hl7.org/fhir/v3/ActCode\",\n        \"code\": \"IMP\",\n        \"display\": \"inpatient encounter\"\n    },\n    \"subject\": {\n        \"reference\": \"Patient/{{fhir_created_patient_id}}\",\n        \"identifier\": {\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\"value\":\"{{lastTestNHSNumber}}\"}\n    },\n    \"participant\": [\n        {\n            \"type\": [\n                {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://hl7.org/fhir/v3/ParticipationType\",\n                            \"code\": \"DIS\",\n                            \"display\": \"discharger\"\n                        }\n                    ]\n                }\n            ],\n            \"individual\": {\n                \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\n                \"display\": \"Mrs AA Bhatia\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Encounter",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Encounter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Location by ODS site code and include Organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Location by ODS site code and include Organization - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Location by ODS site code and include Organization - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a patient...",
											"pm.test(\"Can search for Location by ODS site code and include Organization - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"//ODS Code === ods code searched for",
											"pm.test(\"Can search for Location by ODS site code and include Organization - ods site code === ods site code searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.identifier[0].value).to.eql(\"RTG08\");",
											"    ",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can search for Location by ODS site code and include Organization - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can search for Location by ODS site code and include Organization - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Location by ODS site code and include Organization - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Entry search mode for each Location is set to \"match\"",
											"pm.test(\"Can search for Location by ODS site code and include Organization - search mode for each patient resource === 'match'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Location') {",
											"            pm.expect(entry.search.mode).to.eql('match');  ",
											"         }",
											"    });",
											"});",
											"//Only one organisation is included (the search set contains references to the same practitioner resource)",
											"pm.test(\"Can search for Location by ODS site code and include Organization - only 1 unique Organisation resource is included\", function () {",
											"    var jsonData = pm.response.json();",
											"    var organizationCount = 0;",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Organization') {",
											"            organizationCount++;",
											"         }",
											"    });",
											"    pm.expect(organizationCount).to.eql(1);  ",
											"});",
											"//Entry search mode for organisation is set to \"include\"",
											"pm.test(\"Can search for Location by ODS site code and include Organization - search mode for each patient resource === 'include'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Organization') {",
											"            pm.expect(entry.search.mode).to.eql('include');  ",
											"         }",
											"    });",
											"});",
											"//The correct organisation resource is included",
											"pm.test(\"Can search for Location by ODS site code and include Organization - Organisation resource included is referenced by the Patient entries\", function () {",
											"    var jsonData = pm.response.json();",
											"    var organizationReferenceId = \"Organization/\";",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Organization') {",
											"            organizationReferenceId = organizationReferenceId + entry.resource.id;",
											"         }",
											"    });",
											"       jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Patient') {",
											"            pm.expect(entry.resource.managingOrganization.reference).to.eql(organizationReferenceId);",
											"         }",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Location?identifier=https://fhir.nhs.uk/Id/ods-site-code|RTG08&_include=Location:organization",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Location"
									],
									"query": [
										{
											"key": "identifier",
											"value": "https://fhir.nhs.uk/Id/ods-site-code|RTG08"
										},
										{
											"key": "_include",
											"value": "Location:organization"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search Patient by _id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a patient...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"//Nhs number === nhs number searched for",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - nhs number === nhs number searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.identifier[0].value).to.eql(pm.environment.get(\"lastTestNHSNumber\"));",
											"    ",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?_id={{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{fhir_created_patient_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search Patient by NHS Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a patient...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"//Nhs number === nhs number searched for",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - nhs number === nhs number searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.identifier[0].value).to.eql(pm.environment.get(\"lastTestNHSNumber\"));",
											"    ",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?identifier=https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "identifier",
											"value": "https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search Patient by NHS Number and include general practitioner",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a patient...",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"//Nhs number === nhs number searched for",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - nhs number === nhs number searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.identifier[0].value).to.eql(pm.environment.get(\"lastTestNHSNumber\"));",
											"    ",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Entry search mode for each patient is set to \"match\"",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - search mode for each patient resource === 'match'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Patient') {",
											"            pm.expect(entry.search.mode).to.eql('match');  ",
											"         }",
											"    });",
											"});",
											"//Only one practitioner is included (the search set contains references to the same practitioner resource)",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - only 1 unique Practitioner resource is included\", function () {",
											"    var jsonData = pm.response.json();",
											"    var practitionerCount = 0;",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Practitioner') {",
											"            practitionerCount++;",
											"         }",
											"    });",
											"    pm.expect(practitionerCount).to.eql(1);  ",
											"});",
											"//Entry search mode for practitioner is set to \"include\"",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - search mode for each patient resource === 'include'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Practitioner') {",
											"            pm.expect(entry.search.mode).to.eql('include');  ",
											"         }",
											"    });",
											"});",
											"//The correct practitioner resource is included",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - Practitioner resource included is referenced by the Patient entries\", function () {",
											"    var jsonData = pm.response.json();",
											"    var practitionerReferenceId = \"Practitioner/\";",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Practitioner') {",
											"            practitionerReferenceId = practitionerReferenceId + entry.resource.id;",
											"         }",
											"    });",
											"       jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Patient') {",
											"            pm.expect(entry.resource.generalPractitioner[0].reference).to.eql(practitionerReferenceId);",
											"         }",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?identifier=https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}&_include=Patient:general-practitioner",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "identifier",
											"value": "https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}"
										},
										{
											"key": "_include",
											"value": "Patient:general-practitioner"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search Patient by NHS Number and include Organisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a patient...",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"//Nhs number === nhs number searched for",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - nhs number === nhs number searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.identifier[0].value).to.eql(pm.environment.get(\"lastTestNHSNumber\"));",
											"    ",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Entry search mode for each patient is set to \"match\"",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - search mode for each patient resource === 'match'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Patient') {",
											"            pm.expect(entry.search.mode).to.eql('match');  ",
											"         }",
											"    });",
											"});",
											"//Only one organisation is included (the search set contains references to the same practitioner resource)",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - only 1 unique Organisation resource is included\", function () {",
											"    var jsonData = pm.response.json();",
											"    var organizationCount = 0;",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Organization') {",
											"            organizationCount++;",
											"         }",
											"    });",
											"    pm.expect(organizationCount).to.eql(1);  ",
											"});",
											"//Entry search mode for organisation is set to \"include\"",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - search mode for each patient resource === 'include'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Organization') {",
											"            pm.expect(entry.search.mode).to.eql('include');  ",
											"         }",
											"    });",
											"});",
											"//The correct organisation resource is included",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - Organisation resource included is referenced by the Patient entries\", function () {",
											"    var jsonData = pm.response.json();",
											"    var organizationReferenceId = \"Organization/\";",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Organization') {",
											"            organizationReferenceId = organizationReferenceId + entry.resource.id;",
											"         }",
											"    });",
											"       jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Patient') {",
											"            pm.expect(entry.resource.managingOrganization.reference).to.eql(organizationReferenceId);",
											"         }",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?identifier=https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}&_include=Patient:organization",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "identifier",
											"value": "https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}"
										},
										{
											"key": "_include",
											"value": "Patient:organization"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search Patient by NHS Number and include Organisation, General Practitioner",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search Patient by NHS Number and include Organisation, General Practitioner - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search Patient by NHS Number and include Organisation, General Practitioner - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//3 resources are returned and that resource is a patient...",
											"pm.test(\"Can search Patient by NHS Number and include Organisation, General Practitioner - 3 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(3);",
											"});",
											"//Nhs number === nhs number searched for",
											"pm.test(\"Can search Patient by NHS Number and include Organisation, General Practitioner - nhs number === nhs number searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.identifier[0].value).to.eql(pm.environment.get(\"lastTestNHSNumber\"));",
											"    ",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can search Patient by NHS Number and include Organisation, General Practitioner - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can search Patient by NHS Number and include Organisation, General Practitioner - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search Patient by NHS Number and include Organisation, General Practitioner - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Entry search mode for each patient is set to \"match\"",
											"pm.test(\"Can search Patient by NHS Number and include Organisation, General Practitioner - search mode for each patient resource === 'match'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Patient') {",
											"            pm.expect(entry.search.mode).to.eql('match');  ",
											"         }",
											"    });",
											"});",
											"//Only one organisation is included (the search set contains references to the same practitioner resource)",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - only 1 unique Organisation resource is included\", function () {",
											"    var jsonData = pm.response.json();",
											"    var organizationCount = 0;",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Organization') {",
											"            organizationCount++;",
											"         }",
											"    });",
											"    pm.expect(organizationCount).to.eql(1);  ",
											"});",
											"//Entry search mode for organisation is set to \"include\"",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - search mode for each included resource === 'include'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Organization') {",
											"            pm.expect(entry.search.mode).to.eql('include');  ",
											"         }",
											"    });",
											"});",
											"//The correct organisation resource is included",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - Organisation resource included is referenced by the Patient entries\", function () {",
											"    var jsonData = pm.response.json();",
											"    var organizationReferenceId = \"Organization/\";",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Organization') {",
											"            organizationReferenceId = organizationReferenceId + entry.resource.id;",
											"         }",
											"    });",
											"       jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Patient') {",
											"            pm.expect(entry.resource.managingOrganization.reference).to.eql(organizationReferenceId);",
											"         }",
											"    });",
											"});",
											"//Only one practitioner is included (the search set contains references to the same practitioner resource)",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - only 1 unique Practitioner resource is included\", function () {",
											"    var jsonData = pm.response.json();",
											"    var practitionerCount = 0;",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Practitioner') {",
											"            practitionerCount++;",
											"         }",
											"    });",
											"    pm.expect(practitionerCount).to.eql(1);  ",
											"});",
											"//Entry search mode for practitioner is set to \"include\"",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - search mode for each included resource === 'include'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Practitioner') {",
											"            pm.expect(entry.search.mode).to.eql('include');  ",
											"         }",
											"    });",
											"});",
											"//The correct practitioner resource is included",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - Practitioner resource included is referenced by the Patient entries\", function () {",
											"    var jsonData = pm.response.json();",
											"    var practitionerReferenceId = \"Practitioner/\";",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Practitioner') {",
											"            practitionerReferenceId = practitionerReferenceId + entry.resource.id;",
											"         }",
											"    });",
											"       jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Patient') {",
											"            pm.expect(entry.resource.generalPractitioner[0].reference).to.eql(practitionerReferenceId);",
											"         }",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?identifier=https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}&_include=Patient:general-practitioner&_include=Patient:organization",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "identifier",
											"value": "https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}"
										},
										{
											"key": "_include",
											"value": "Patient:general-practitioner"
										},
										{
											"key": "_include",
											"value": "Patient:organization"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search Patient by NHS Number and revinclude Encounter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a patient...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"//Nhs number === nhs number searched for",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - nhs number === nhs number searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.identifier[0].value).to.eql(pm.environment.get(\"lastTestNHSNumber\"));",
											"    ",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?identifier=https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}&_revinclude=Encounter:patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "identifier",
											"value": "https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}"
										},
										{
											"key": "_revinclude",
											"value": "Encounter:patient"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for an Encounter and include Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Search FHIR Encounter Resource by _id and include Patient - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Search FHIR Encounter Resource by _id and include Patient - 200 returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a patient...",
											"pm.test(\"Can Search FHIR Encounter Resource by _id and include Patient - 2 resources returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Encounter?_id={{fhir_created_encounter_id}}&_include=Encounter:patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Encounter"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{fhir_created_encounter_id}}"
										},
										{
											"key": "_include",
											"value": "Encounter:patient"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for an Encounter by patient NHS Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a patient...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"//Nhs number === nhs number searched for",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - nhs number === nhs number searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.subject.identifier.value).to.eql(pm.environment.get(\"lastTestNHSNumber\"));",
											"    ",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Encounter?patient:identifier=https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Encounter"
									],
									"query": [
										{
											"key": "patient:identifier",
											"value": "https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for an Encounter by patient reference",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for an Encounter by patient reference - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for an Encounter by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a patient...",
											"pm.test(\"Can search for an Encounter by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can search for an Encounter by patient reference - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can search for an Encounter by patient reference - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for an Encounter by patient reference - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Encounter?patient=Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Encounter"
									],
									"query": [
										{
											"key": "patient",
											"value": "Patient/{{fhir_created_patient_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for an 'arrived' Encounter by patient NHS Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for an 'arrived' Encounter by patient NHS Number - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for an 'arrived' Encounter by patient NHS Number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a patient...",
											"pm.test(\"Can search for an 'arrived' Encounter by patient NHS Number- 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"//Nhs number === nhs number searched for",
											"pm.test(\"Can search for an 'arrived' Encounter by patient NHS Number- nhs number === nhs number searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.subject.identifier.value).to.eql(pm.environment.get(\"lastTestNHSNumber\"));",
											"    ",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can search for an 'arrived' Encounter by patient NHS Number - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can search for an 'arrived' Encounter by patient NHS Number - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for an 'arrived' Encounter by patient NHS Number - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Encounter status === 'arrived'",
											"pm.test(\"Can search for an 'arrived' Encounter by patient NHS Number - status === 'arrived'\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.status).to.eql('arrived');",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Encounter?patient:identifier=https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}&status=arrived",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Encounter"
									],
									"query": [
										{
											"key": "patient:identifier",
											"value": "https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}"
										},
										{
											"key": "status",
											"value": "arrived"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search Encounter by _id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Search FHIR Encounter Resource by _id - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Search FHIR Encounter Resource by _id - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a patient...",
											"pm.test(\"Can Search FHIR Encounter Resource by _id - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Encounter?_id={{fhir_created_encounter_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Encounter"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{fhir_created_encounter_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can get 2nd page of female Patient resources search with page size of 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can get 2nd page of female Patient resources search - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can get 2nd page of female Patient resources search - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can get 2nd page of female Patient resources search - 5 links are present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(5);",
											"});",
											"//First, Next, Self, Previous, Last are present...",
											"pm.test(\"Can get 2nd page of female Patient resources search - all link relations are present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    links.forEach(function(link) {",
											"      pm.expect(link.relation).to.satisfy(function(relation) {",
											"          return relation === \"first\" || relation === \"next\" || relation === \"self\"",
											"            || relation === \"previous\" || relation === \"last\";",
											"      })",
											"    });",
											"});",
											"//Bundle total === 3...",
											"pm.test(\"Can get 2nd page of female Patient resources search - Bundle total === 3\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(3);",
											"});",
											"//1 resource is returned in this page...",
											"pm.test(\"Can get 2nd page of female Patient resources search - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"//1 result is a Patient",
											"pm.test(\"Can get 2nd page of female Patient resources search  - resource returned is a Patient\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"//Patient result returned is a female",
											"pm.test(\"Can get 2nd page of female Patient resources search - resource returned is female\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.gender).to.eql(\"female\");",
											"});",
											"//Previous results are NOT contained in the bundle...",
											"pm.test(\"Can get 2nd page of female Patient resources search - previous results are NOT present\", function() {",
											"   var jsonData = pm.response.json();",
											"   var resource = jsonData.entry[0].resource;",
											"   pm.expect(pm.environment.get(\"patient_search_result_ids\")).to.not.contain(resource.id);",
											"});",
											"//Store the applicable links in env variable (for subsequent tests)..",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"patient_search_next_page\", _.find(jsonData.link, function(l) { return l.relation === 'next'; }).url);",
											"//Capture the result id as will need to check the result only appears ONCE in a paged search...",
											"var resultIds = pm.environment.get(\"patient_search_result_ids\");",
											"resultIds.push(jsonData.entry[0].resource.id);",
											"pm.environment.set(\"patient_search_result_ids\",resultIds);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{patient_search_next_page}}",
									"host": [
										"{{patient_search_next_page}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can get 3rd page of female Patient resources search with page size of 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can get 3rd page of female Patient resources search - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can get 3rd page of female Patient resources search - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can get 3rd page of female Patient resources search - 5 links are present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(5);",
											"});",
											"//First, Next, Self, Previous, Last are present...",
											"pm.test(\"Can get 3rd page of female Patient resources search - all link relations are present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    links.forEach(function(link) {",
											"      pm.expect(link.relation).to.satisfy(function(relation) {",
											"          return relation === \"first\" || relation === \"next\" || relation === \"self\"",
											"            || relation === \"previous\" || relation === \"last\";",
											"      })",
											"    });",
											"});",
											"//Bundle total === 3...",
											"pm.test(\"Can get 3rd page of female Patient resources search - Bundle total === 3\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(3);",
											"});",
											"//1 resource is returned in this page...",
											"pm.test(\"Can get 3rd page of female Patient resources search - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"//1 result is a Patient",
											"pm.test(\"Can get 3rd page of female Patient resources search  - resource returned is a Patient\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"//Patient result returned is a female",
											"pm.test(\"Can get 3rd page of female Patient resources search - resource returned is female\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.gender).to.eql(\"female\");",
											"});",
											"//Previous results are NOT contained in the bundle...",
											"pm.test(\"Can get 3rd page of female Patient resources search - previous results are NOT present\", function() {",
											"   var jsonData = pm.response.json();",
											"   var resource = jsonData.entry[0].resource;",
											"   pm.expect(pm.environment.get(\"patient_search_result_ids\")).to.not.contain(resource.id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{patient_search_next_page}}",
									"host": [
										"{{patient_search_next_page}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for male Patient resources and page through results with page size of 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"var _ = require('lodash');",
											"//Expect 200 success...",
											"pm.test(\"Can search for male Patient resources and page through results with page size of 2 - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for male Patient resources and page through results with page size of 2 - 1 resource bundle is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for male Patient resources and page through results with page size of 2 - 5 links are present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(5);",
											"});",
											"//First, Next, Self, Previous, Last are present...",
											"pm.test(\"Can search for male Patient resources and page through results with page size of 2 - all link relations are present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    links.forEach(function(link) {",
											"      pm.expect(link.relation).to.satisfy(function(relation) {",
											"          return relation === \"first\" || relation === \"next\" || relation === \"self\"",
											"            || relation === \"previous\" || relation === \"last\";",
											"      })",
											"    });",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for male Patient resources and page through results with page size of 2 - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 3...",
											"pm.test(\"Can search for male Patient resources and page through results with page size of 2 - Bundle total === 3\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(3);",
											"});",
											"//1 resource is returned in this page...",
											"pm.test(\"Can search for male Patient resources and page through results with page size of 2 - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"//1 result is a Patient",
											"pm.test(\"Can search for male Patient resources and page through results with page size of 2 - both resources returned are a Patient\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    jsonData.entry.forEach(function(entry) {",
											"        pm.expect(entry.resource.resourceType).to.eql(\"Patient\");",
											"    });",
											"});",
											"//Patient result returned is a male",
											"pm.test(\"Can search for male Patient resources and page through results with page size of 2 - both resources returned are a male\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.gender).to.eql(\"male\");",
											"});",
											"var jsonData = pm.response.json();",
											"//Store the applicable links in env variable (for subsequent tests)..",
											"pm.environment.set(\"patient_search_next_page\", _.find(jsonData.link, function(l) { return l.relation === 'next'; }).url);",
											"//Capture the result id as will need to check the result only appears ONCE in a paged search...",
											"var resultIds = [];",
											"jsonData.entry.forEach(function(entry) {",
											"    resultIds.push(entry.resource.id);",
											"});",
											"pm.environment.set(\"patient_search_result_ids\",resultIds);",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var resultIds = pm.environment.get(\"patient_search_result_ids\");",
											"if(typeof resultIds !== 'undefined' && Array.isArray(resultIds) && resultIds.length > 0) {",
											"    resultIds = [];",
											"    pm.environment.set(\"patient_search_result_ids\",resultIds);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?gender=male&_count=2",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "gender",
											"value": "male"
										},
										{
											"key": "_count",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can get 2nd page of male Patient resources search with page size of 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can get 2nd page of male Patient resources search with page size of 2 - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can get 2nd page of male Patient resources search with page size of 2 - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can get 2nd page of male Patient resources search with page size of 2 - 5 links are present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(5);",
											"});",
											"//First, Next, Self, Previous, Last are present...",
											"pm.test(\"Can get 2nd page of male Patient resources search with page size of 2 - all link relations are present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    links.forEach(function(link) {",
											"      pm.expect(link.relation).to.satisfy(function(relation) {",
											"          return relation === \"first\" || relation === \"next\" || relation === \"self\"",
											"            || relation === \"previous\" || relation === \"last\";",
											"      })",
											"    });",
											"});",
											"//Bundle total === 3...",
											"pm.test(\"CCan get 2nd page of male Patient resources search with page size of 2 - Bundle total === 3\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(3);",
											"});",
											"//1 resource is returned in this page...",
											"pm.test(\"Can get 2nd page of male Patient resources search with page size of 2 - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"//1 result is a Patient",
											"pm.test(\"Can get 2nd page of male Patient resources search with page size of 2 - resource returned is a Patient\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"//Patient result returned is a female",
											"pm.test(\"Can get 2nd page of male Patient resources search with page size of 2 - resource returned is male\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.gender).to.eql(\"male\");",
											"});",
											"//Previous results are NOT contained in the bundle...",
											"pm.test(\"Can get 2nd page of male Patient resources search with page size of 2 - previous results are NOT present\", function() {",
											"   var jsonData = pm.response.json();",
											"   var resource = jsonData.entry[0].resource;",
											"   pm.expect(pm.environment.get(\"patient_search_result_ids\")).to.not.contain(resource.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{patient_search_next_page}}",
									"host": [
										"{{patient_search_next_page}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for male patients and sort by -family",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"var _ = require('lodash');",
											"//Expect 200 success...",
											"pm.test(\"Can search for male patients and sort by -name - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for male patients and sort by -name - 1 bundle resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for male patients and sort by -name - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for male patients and sort by -name - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 3...",
											"pm.test(\"Can search for male patients and sort by -name - Bundle total === 3\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(3);",
											"});",
											"//Sorted Reverse Alpha... T,S,B",
											"pm.test(\"Can search for male patients and sort by -name - results are sorted reverse alphabetically\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].resource.name[0].family).to.eql(\"TARGARYEN\") &&",
											"        pm.expect(jsonData.entry[1].resource.name[0].family).to.eql(\"STARK\") && ",
											"            pm.expect(jsonData.entry[2].resource.name[0].family).to.eql(\"BARATHEON\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var resultIds = pm.environment.get(\"patient_search_result_ids\");",
											"if(typeof resultIds !== 'undefined' && Array.isArray(resultIds) && resultIds.length > 0) {",
											"    resultIds = [];",
											"    pm.environment.set(\"patient_search_result_ids\",resultIds);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?gender=male&_sort=-family",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "gender",
											"value": "male"
										},
										{
											"key": "_sort",
											"value": "-family"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for PractitionerRole by practitioner reference",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"var _ = require('lodash');",
											"//Expect 200 success...",
											"pm.test(\"Can search for PracititionerRole by practitioner reference - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for PracititionerRole by practitioner reference - 1 bundle resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 links are present in results...",
											"pm.test(\"Can search for PracititionerRole by practitioner reference- 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for PracititionerRole by practitioner reference - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for PracititionerRole by practitioner reference - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//Does the practitioner referenced match that which is in the query?",
											"pm.test(\"Can search for PracititionerRole by practitioner reference - Does the practitioner referenced match that which is in the query?\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].resource.practitioner.reference).to.eql(\"Practitioner/\" + pm.environment.get(\"fhir_created_practitioner_id\"));",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/PractitionerRole?practitioner=Practitioner/{{fhir_created_practitioner_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"PractitionerRole"
									],
									"query": [
										{
											"key": "practitioner",
											"value": "Practitioner/{{fhir_created_practitioner_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for PractitionerRole by organization reference",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"var _ = require('lodash');",
											"//Expect 200 success...",
											"pm.test(\"Can search for PractitionerRole by organization reference - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for PractitionerRole by organization reference - 1 bundle resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 links are present in results...",
											"pm.test(\"Can search for PractitionerRole by organization reference - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for PractitionerRole by organization reference - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for PractitionerRole by organization reference - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//Does the organization referenced match that which is in the query?",
											"pm.test(\"Can search for PractitionerRole by organization reference - Does the practitioner referenced match that which is in the query?\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].resource.organization.reference).to.eql(\"Organization/\" + pm.environment.get(\"fhir_created_organization_id\"));",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/PractitionerRole?organization=Organization/{{fhir_created_organization_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"PractitionerRole"
									],
									"query": [
										{
											"key": "organization",
											"value": "Organization/{{fhir_created_organization_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Patient resource FFFGREYJOY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Patient resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Patient resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Patient resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_patient_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Patient resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Patient resource - Location header is present and in correct format /Patient/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_patient_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"identifier\": [{\r\n        \"extension\": [{\r\n            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                    \"code\": \"01\",\r\n                    \"display\": \"Number present and verified\"\r\n                }]\r\n            }\r\n        }],\r\n        \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n        \"value\": \"{{lastTestNHSNumber}}\"\r\n    }],\r\n    \"active\": true,\r\n    \"name\": [{\r\n        \"use\": \"official\",\r\n        \"family\": \"GREYJOY\",\r\n        \"given\": [\r\n            \"FFF\"\r\n        ],\r\n        \"prefix\": [\r\n            \"FFF\"\r\n        ]\r\n    }],\r\n    \"gender\": \"female\",\r\n    \"birthDate\": \"2000-04-05\",\r\n    \"address\": [{\r\n        \"use\": \"home\",\r\n        \"type\": \"physical\"\r\n    }],\r\n    \"maritalStatus\": {\r\n        \"coding\": [{\r\n            \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n            \"code\": \"S\",\r\n            \"display\": \"Never Married\"\r\n        }]\r\n    },\r\n    \"generalPractitioner\": [{\r\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\r\n        \"display\": \"Mrs AA Bhatia\"\r\n    }],\r\n    \"managingOrganization\": {\r\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\r\n        \"display\": \"HSCIC test Practice\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Patient resource GGGGREYJOY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Patient resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Patient resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Patient resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_patient_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Patient resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Patient resource - Location header is present and in correct format /Patient/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_patient_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"identifier\": [{\r\n        \"extension\": [{\r\n            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                    \"code\": \"01\",\r\n                    \"display\": \"Number present and verified\"\r\n                }]\r\n            }\r\n        }],\r\n        \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n        \"value\": \"{{lastTestNHSNumber}}\"\r\n    }],\r\n    \"active\": true,\r\n    \"name\": [{\r\n        \"use\": \"official\",\r\n        \"family\": \"GREYJOY\",\r\n        \"given\": [\r\n            \"GGG\"\r\n        ],\r\n        \"prefix\": [\r\n            \"GGG\"\r\n        ]\r\n    }],\r\n    \"gender\": \"male\",\r\n    \"birthDate\": \"2001-03-19\",\r\n    \"address\": [{\r\n        \"use\": \"home\",\r\n        \"type\": \"physical\"\r\n    }],\r\n    \"maritalStatus\": {\r\n        \"coding\": [{\r\n            \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n            \"code\": \"S\",\r\n            \"display\": \"Never Married\"\r\n        }]\r\n    },\r\n    \"generalPractitioner\": [{\r\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\r\n        \"display\": \"Mrs AA Bhatia\"\r\n    }],\r\n    \"managingOrganization\": {\r\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\r\n        \"display\": \"HSCIC test Practice\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for female Patient resources where name startswith GREYJOY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"var _ = require('lodash');",
											"//Expect 200 success...",
											"pm.test(\"Can search for female Patient resources where name contains GREYJOY - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for female Patient resources where name contains GREYJOY - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for female Patient resources where name contains GREYJOY - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for female Patient resources where name contains GREYJOY - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 2...",
											"pm.test(\"Can search for female Patient resources where name contains GREYJOY - Bundle total === 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(2);",
											"});",
											"//2 resources are returned in this page...",
											"pm.test(\"Can search for female Patient resources where name contains GREYJOY - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Can search for female Patient resources where name contains GREYJOY - resources returned are Patient resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"pm.test(\"Can search for female Patient resources where name contains GREYJOY - resources returned are female\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].resource.gender).to.eql(\"female\");",
											"    pm.expect(jsonData.entry[1].resource.gender).to.eql(\"female\");",
											"});",
											"",
											"pm.test(\"Can search for female Patient resources where name contains GREYJOY - resources returned have a family name of GREYJOY\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].resource.name[0].family).to.eql(\"GREYJOY\");",
											"    pm.expect(jsonData.entry[1].resource.name[0].family).to.eql(\"GREYJOY\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var resultIds = pm.environment.get(\"patient_search_result_ids\");",
											"if(typeof resultIds !== 'undefined' && Array.isArray(resultIds) && resultIds.length > 0) {",
											"    resultIds = [];",
											"    pm.environment.set(\"patient_search_result_ids\",resultIds);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?family=GREYJOY&gender=female",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "family",
											"value": "GREYJOY"
										},
										{
											"key": "gender",
											"value": "female"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create an AllergyIntolerance resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create an AllergyIntolerance resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create an AllergyIntolerance resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"AllergyIntolerance\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create an AllergyIntolerance resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_allergy_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create an AllergyIntolerance resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create an AllergyIntolerance resource - Location header is present and in correct format /Patient/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_allergy_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create an AllergyIntolerance resource -  ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"AllergyIntolerance\",\n    \"meta\": {\n        \"profile\": [\n            \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-AllergyIntolerance-1\"\n        ]\n    },\n    \"identifier\": [\n        {\n            \"system\": \"https://fhir.leedsth.nhs.uk/Id/allergy\",\n            \"value\": \"100018\"\n        }\n    ],\n    \"clinicalStatus\": \"active\",\n    \"verificationStatus\": \"unconfirmed\",\n    \"code\": {\n        \"coding\": [\n            {\n                \"system\": \"http://snomed.info/sct\",\n                \"code\": \"160244002\",\n                \"display\": \"No Known Allergies\"\n            }\n        ]\n    },\n    \"patient\": {\n\t\t\"reference\": \"Patient/{{fhir_created_patient_id}}\",\n\t\t\"identifier\": {\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\"value\":\"{{lastTestNHSNumber}}\"}\n    },\n    \"assertedDate\": \"2017-10-19T00:00:00+00:00\",\n    \"asserter\": {\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\n        \"display\": \"Dr S Smith\"\n    }\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/AllergyIntolerance",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"AllergyIntolerance"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Consent resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create a Consent resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create a Consent resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Consent\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create a Consent resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_consent_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create an MedicationStatement resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create a Consent resource - Location header is present and in correct format /Consent/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Consent/\" + pm.environment.get(\"fhir_created_consent_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create a Consent resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n                \"resourceType\": \"Consent\",\n                \"identifier\": {\n                    \"system\": \"https://fhir.tpp.co.uk/Consent/Identifier\",\n                    \"value\": \"consent1\"\n                },\n                \"status\": \"active\",\n                \"patient\": {\n                    \"reference\": \"Patient/{{fhir_created_patient_id}}\",\n\t\t\t\t\t\"identifier\": {\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\"value\":\"{{lastTestNHSNumber}}\"}\n                },\n                \"dateTime\": \"2019-06-23T23:00:00+00:00\",\n                \"actor\": [\n                    {\n                        \"role\": {\n                            \"coding\": [\n                                {\n                                    \"system\": \"http://hl7.org/fhir/v3/ParticipationType\",\n                                    \"code\": \"PROV\",\n                                    \"display\": \"Healthcare Provider\"\n                                }\n                            ]\n                        },\n                        \"reference\": {\n                            \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\n                            \"display\": \"Dr K Rodger\"\n                        }\n                    }\n                ],\n                \"policy\": [\n                    {\n                        \"authority\": \"http://fhir.nhs.uk/Policy/EOLC\"\n                    }\n                ],\n                \"purpose\": [\n                    {\n                        \"system\": \"http://snomed.info/sct\",\n                        \"code\": \"882981000000105\",\n                        \"display\": \"Consent given by legitimate patient representative for sharing end of life care coordination record (finding)\"\n                    }\n                ]\n            }"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Consent",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Consent"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Consent resources by consentor reference",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Consent resources by consentor reference - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Consent resources by consentor reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for Consent resources by consentor reference - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Consent resources by consentor reference - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Consent resources by consentor reference - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Consent resources by consentor reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Can search for Consent resources by consentor reference - resources returned are Consent resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Consent\");",
											"});",
											"",
											"//Returned resource reference matches that of patient...",
											"pm.test(\"Can search for Consent resources by consentor reference - patient id === patient id searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.patient.reference).to.eql('Patient/' + pm.environment.get(\"fhir_created_patient_id\"));",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Consent?consentor=Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Consent"
									],
									"query": [
										{
											"key": "consentor",
											"value": "Patient/{{fhir_created_patient_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Consent resources by patient reference",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Consent resources by patient reference - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Consent resources by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for Consent resources by patient reference - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Consent resources by patient reference - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Consent resources by patient reference - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Consent resources by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Can search for Consent resources by patient reference - resources returned are Consent resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Consent\");",
											"});",
											"",
											"//Returned resource reference matches that of patient...",
											"pm.test(\"Can search for Consent resources by patient reference - patient id === patient id searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.patient.reference).to.eql('Patient/' + pm.environment.get(\"fhir_created_patient_id\"));",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Consent?patient=Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Consent"
									],
									"query": [
										{
											"key": "patient",
											"value": "Patient/{{fhir_created_patient_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can Patient search revinclude Consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Patient search revinclude Consent - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Patient search revinclude Consent - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can Patient search revinclude Consent - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can Patient search revinclude Consent - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 2...",
											"pm.test(\"Can Patient search revinclude Consent - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can Patient search revinclude Consent - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Can Patient search revinclude Consent - 1 patient resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"pm.test(\"Can Patient search revinclude Consent - 1 consent resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[1].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Consent\");",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?_id={{fhir_created_patient_id}}&_revinclude=Consent:consentor",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{fhir_created_patient_id}}"
										},
										{
											"key": "_revinclude",
											"value": "Consent:consentor"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can Consent search by status include referenced Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Consent search by status include referenced Patient - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Consent search by status include referenced Patient - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can Consent search by status include referenced Patient - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can Consent search by status include referenced Patient - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 2...",
											"pm.test(\"Can Consent search by status include referenced Patient - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can Consent search by status include referenced Patient - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Can Consent search by status include referenced Patient - 1 Consent resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Consent\");",
											"});",
											"",
											"pm.test(\"Can Consent search by status include referenced Patient - 1 Patient resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[1].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Consent?status=active&_include=Consent:consentor",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Consent"
									],
									"query": [
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "_include",
											"value": "Consent:consentor"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an Encounter resource for Observation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create an Encounter resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create an Encounter resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Encounter\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create an Encounter resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_encounter_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create an Organization resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create an Encounter resource - Location header is present and in correct format /Encounter/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Encounter/\" + pm.environment.get(\"fhir_created_encounter_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Encounter resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Encounter\",\n    \"meta\": {\n        \"profile\": [\n            \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Encounter-1\"\n        ]\n    },\n    \"identifier\": [\n        {\n            \"system\": \"https://tools.ietf.org/html/rfc4122\",\n            \"value\": \"db00be4b-2f33-4cc3-8eff-4a57e56b185b\"\n        }\n    ],\n    \"status\": \"arrived\",\n    \"class\": {\n        \"system\": \"http://hl7.org/fhir/v3/ActCode\",\n        \"code\": \"IMP\",\n        \"display\": \"inpatient encounter\"\n    },\n    \"subject\": {\n        \"reference\": \"Patient/{{fhir_created_patient_id}}\",\n        \"identifier\": {\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\"value\":\"{{lastTestNHSNumber}}\"}\n    },\n    \"participant\": [\n        {\n            \"type\": [\n                {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://hl7.org/fhir/v3/ParticipationType\",\n                            \"code\": \"DIS\",\n                            \"display\": \"discharger\"\n                        }\n                    ]\n                }\n            ],\n            \"individual\": {\n                \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\n                \"display\": \"Mrs AA Bhatia\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Encounter",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Encounter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create an Medication resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create an Medication resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"CCan create an Medication resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Medication\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create an Medication resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_medication_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create an Medication resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create an Medication resource - Location header is present and in correct format /Medication/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_medication_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create an Medication resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Medication\",\n    \"meta\": {\n        \"profile\": [\n            \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Medication-1\"\n        ]\n    },\n    \"code\": {\n        \"coding\": [\n            {\n                \"system\": \"http://snomed.info/sct\",\n                \"code\": \"13255311000001101\",\n                \"display\": \"Asacol 800mg MR gastro-resistant tablets (Allergan Ltd)\"\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Medication",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Medication"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Medication by code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Medication by code - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Medication by code - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 links are present in results...",
											"pm.test(\"Can search for Medication by code - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Medication by code - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Medication by code - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Medication by code - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Can search for Medication by code - resources returned are Medication resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Medication\");",
											"});",
											"//test category is exactly as what was searched for",
											"pm.test(\"Can search for Medication by code - medication code matches that which was searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.category[0].coding[0].code).to.eql(\"13255311000001101\") &&",
											"        pm.expect(resource.category[0].coding[0].system).to.eql(\"http://snomed.info/sct\")",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Medication?code=http://snomed.info/sct|13255311000001101",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Medication"
									],
									"query": [
										{
											"key": "code",
											"value": "http://snomed.info/sct|13255311000001101"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create an MedicationStatement",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create an MedicationStatement resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create an MedicationStatementn resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"MedicationStatement\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create an MedicationStatement resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_medication_statement_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create an MedicationStatement resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create an MedicationStatement resource - Location header is present and in correct format /MedicationStatement/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_medication_statement_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create an MedicationStatement resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"resourceType\": \"MedicationStatement\",\n\t\"meta\": {\n\t\t\"profile\": [\n\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-MedicationStatement-1\"\n\t\t]\n\t},\n\t\"identifier\": [{\n\t\t\"system\": \"https://tools.ietf.org/html/rfc4122\",\n\t\t\"value\": \"154de259-cbd3-4430-aac9-95fdbf19d88e\"\n\t}],\n\t\"status\": \"active\",\n\t\"medicationReference\": {\n\t\t\"reference\": \"Medication/{{fhir_created_medication_id}}\"\n\t},\n\t\"effectiveDataTime\":\"2019-03-09T09:05:00+00:00\",\n\t\"subject\": {\n\t\t\"reference\": \"Patient/{{fhir_created_patient_id}}\",\n\t\t\"identifier\": {\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\"value\":\"{{lastTestNHSNumber}}\"}\n\t},\n\t\"taken\": \"y\",\n\t\"dosage\": [{\n\t\t\"text\": \"10mg as necessary\",\n\t\t\"patientInstruction\": \"Not to be taken more frequently than three times a day.\",\n\t\t\"route\": {\n\t\t\t\"coding\": [{\n\t\t\t\t\"system\": \"http://snomed.info/sct\",\n\t\t\t\t\"code\": \"26643006\",\n\t\t\t\t\"display\": \"Oral\"\n\t\t\t}]\n\t\t}\n\t}]\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/MedicationStatement",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"MedicationStatement"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for MedicationStatement resources by MedicationStatement Identifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for MedicationStatement resources by MedicationStatement Identifier - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for MedicationStatement resources by MedicationStatement Identifier - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for MedicationStatement resources by MedicationStatement Identifier - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for MedicationStatement resources by MedicationStatement Identifier - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for MedicationStatement resources by MedicationStatement Identifier - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for MedicationStatement resources by MedicationStatement Identifier - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/MedicationStatement?identifier=https://tools.ietf.org/html/rfc4122|154de259-cbd3-4430-aac9-95fdbf19d88e",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"MedicationStatement"
									],
									"query": [
										{
											"key": "identifier",
											"value": "https://tools.ietf.org/html/rfc4122|154de259-cbd3-4430-aac9-95fdbf19d88e"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for MedicationStatement resources by patient reference",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for MedicationStatement resources by patient reference - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for MedicationStatement resources by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for MedicationStatement resources by patient reference - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for MedicationStatement resources by patient reference - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for MedicationStatement resources by patient reference - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for MedicationStatement resources by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Can search for MedicationStatement resources by patient reference - resources returned are AllergyIntolerance resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"MedicationStatement\");",
											"});",
											"",
											"//Returned resource reference matches that of patient...",
											"pm.test(\"Can search for MedicationStatement resources by patient reference - patient id === patient id searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.subject.reference).to.eql('Patient/' + pm.environment.get(\"fhir_created_patient_id\"));",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/MedicationStatement?patient=Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"MedicationStatement"
									],
									"query": [
										{
											"key": "patient",
											"value": "Patient/{{fhir_created_patient_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for MedicationStatement resources by patient nhs number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for MedicationStatement resources by patient nhs number - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for MedicationStatement resources by patient nhs number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for MedicationStatement resources by patient nhs number - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for MedicationStatement resources by patient nhs number - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for MedicationStatement resources by patient nhs number - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for MedicationStatement resources by patient nhs number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Can search for MedicationStatement resources by patient nhs number - resources returned are MedicationStatement resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"MedicationStatement\");",
											"});",
											"//NHS number matches that of the NHS number searched for",
											"pm.test(\"Can Search FHIR MedicationStatement Resources by NHS Number - nhs number === nhs number searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.subject.identifier.value).to.eql(pm.environment.get(\"lastTestNHSNumber\"));",
											"    ",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/MedicationStatement?patient=https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"MedicationStatement"
									],
									"query": [
										{
											"key": "patient",
											"value": "https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can Patient search revinclude MedicationStatement",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Patient search revinclude MedicationStatement - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Patient search revinclude MedicationStatement - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can Patient search revinclude MedicationStatement - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can Patient search revinclude MedicationStatement - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 2...",
											"pm.test(\"Can Patient search revinclude MedicationStatement - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can Patient search revinclude MedicationStatement - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Can Patient search revinclude MedicationStatement - 1 patient resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"pm.test(\"Can Patient search revinclude MedicationStatement - 1 medication statement resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[1].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"MedicationStatement\");",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?_id={{fhir_created_patient_id}}&_revinclude=MedicationStatement:patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{fhir_created_patient_id}}"
										},
										{
											"key": "_revinclude",
											"value": "MedicationStatement:patient"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can MedicationStatement search by status include referenced Medication and Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can MedicationStatement search by status include referenced Medication and Patient - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can MedicationStatement search by status include referenced Medication and Patient - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can MedicationStatement search by status include referenced Medication and Patient - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can MedicationStatement search by status include referenced Medication and Patient - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 2...",
											"pm.test(\"Can MedicationStatement search by status include referenced Medication and Patient - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can MedicationStatement search by status include referenced Medication and Patient - 3 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(3);",
											"});",
											"",
											"pm.test(\"Can MedicationStatement search by status include referenced Medication and Patient - 1 MedicationStatement resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"MedicationStatement\");",
											"});",
											"",
											"pm.test(\"Can MedicationStatement search by status include referenced Medication and Patient - 1 Medication resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[1].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Medication\");",
											"});",
											"",
											"pm.test(\"Can MedicationStatement search by status include referenced Medication and Patient - 1 Patient resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[2].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/MedicationStatement?status=active&_include=MedicationStatement:medication&_include=MedicationStatement:patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"MedicationStatement"
									],
									"query": [
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "_include",
											"value": "MedicationStatement:medication"
										},
										{
											"key": "_include",
											"value": "MedicationStatement:patient"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create an Observation resource Basophil",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create an Observation resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create an Observation resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Observation\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create an Observation resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_observation_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create an Observation resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create an Observation resource - Location header is present and in correct format /Observation/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_observation_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create an Observation resource -  ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n                \"resourceType\": \"Observation\",\n                \"status\": \"final\",\n                \"category\": [\n                    {\n                        \"coding\": [\n                            {\n                                \"system\": \"http://hl7.org/fhir/observation-category\",\n                                \"code\": \"laboratory\",\n                                \"display\": \"Laboratory\"\n                            }\n                        ]\n                    }\n                ],\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://snomed.info/sct\",\n                            \"code\": \"1022571000000108\",\n                            \"display\": \"Basophil count\"\n                        }\n                    ]\n                },\n                \"subject\": {\n\t\t\t\t\t\"reference\": \"Patient/{{fhir_created_patient_id}}\",\n\t\t\t\t\t\"identifier\": {\n\t\t\t\t\t\t\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t\t\t\t\"value\": \"{{lastTestNHSNumber}}\"\n\t\t\t\t\t}\n                },\n                \"effectiveDateTime\": \"2019-03-09T00:00:00+00:00\",\n                \"valueQuantity\": {\n                    \"value\": 0.12,\n                    \"unit\": \"10*9/L\",\n                    \"system\": \"http://unitsofmeasure.org\",\n                    \"code\": \"10*9/L\"\n                },\n                \"interpretation\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://hl7.org/fhir/v2/0078\",\n                            \"code\": \"L\",\n                            \"display\": \"Low\"\n                        }\n                    ]\n                },\n                \"referenceRange\": [\n                    {\n                        \"low\": {\n                            \"value\": 0.02\n                        },\n                        \"high\": {\n                            \"value\": 0.1\n                        }\n                    }\n                ]\n            }"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Observation",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Observation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for AllergyIntolerance resources by patient reference",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - resources returned are AllergyIntolerance resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"AllergyIntolerance\");",
											"});",
											"",
											"//Returned resource reference matches that of patient...",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - patient id === patient id searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.patient.reference).to.eql('Patient/' + pm.environment.get(\"fhir_created_patient_id\"));",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var resultIds = pm.environment.get(\"patient_search_result_ids\");",
											"if(typeof resultIds !== 'undefined' && Array.isArray(resultIds) && resultIds.length > 0) {",
											"    resultIds = [];",
											"    pm.environment.set(\"patient_search_result_ids\",resultIds);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/AllergyIntolerance?patient=Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"AllergyIntolerance"
									],
									"query": [
										{
											"key": "patient",
											"value": "Patient/{{fhir_created_patient_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for AllergyIntolerance resources by patient nhs number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - resources returned are AllergyIntolerance resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"AllergyIntolerance\");",
											"});",
											"//NHS number matches that of the NHS number searched for",
											"pm.test(\"Can Search FHIR AllergyIntolerance Resources by NHS Number - nhs number === nhs number searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.patient.identifier.value).to.eql(pm.environment.get(\"lastTestNHSNumber\"));",
											"    ",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var resultIds = pm.environment.get(\"patient_search_result_ids\");",
											"if(typeof resultIds !== 'undefined' && Array.isArray(resultIds) && resultIds.length > 0) {",
											"    resultIds = [];",
											"    pm.environment.set(\"patient_search_result_ids\",resultIds);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/AllergyIntolerance?patient=https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"AllergyIntolerance"
									],
									"query": [
										{
											"key": "patient",
											"value": "https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can Patient search revinclude AllergyIntolerance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Patient search revinclude AllergyIntolerance - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Patient search revinclude AllergyIntolerance - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can Patient search revinclude AllergyIntolerance - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can Patient search revinclude AllergyIntolerance - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 2...",
											"pm.test(\"Can Patient search revinclude AllergyIntolerance - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can Patient search revinclude AllergyIntolerance - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Can Patient search revinclude AllergyIntolerance - 1 patient resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"pm.test(\"Can Patient search revinclude AllergyIntolerance - 1 allergy intolerance resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[1].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"AllergyIntolerance\");",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?_id={{fhir_created_patient_id}}&_revinclude=AllergyIntolerance:patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{fhir_created_patient_id}}"
										},
										{
											"key": "_revinclude",
											"value": "AllergyIntolerance:patient"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can AllergyIntolerance search include Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can AllergyIntolerance search include Patient - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can AllergyIntolerance search include Patient - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can AllergyIntolerance search include Patient - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can AllergyIntolerance search include Patient - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 2...",
											"pm.test(\"Can AllergyIntolerance search include Patient - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can AllergyIntolerance search include Patient - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Can AllergyIntolerance search include Patient - 1 patient resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[1].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"pm.test(\"Can AllergyIntolerance search include Patient - 1 allergy intolerance resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"AllergyIntolerance\");",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var resultIds = pm.environment.get(\"patient_search_result_ids\");",
											"if(typeof resultIds !== 'undefined' && Array.isArray(resultIds) && resultIds.length > 0) {",
											"    resultIds = [];",
											"    pm.environment.set(\"patient_search_result_ids\",resultIds);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/AllergyIntolerance?_id={{fhir_created_allergy_id}}&_include=AllergyIntolerance:patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"AllergyIntolerance"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{fhir_created_allergy_id}}"
										},
										{
											"key": "_include",
											"value": "AllergyIntolerance:patient"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Observation resources by patient reference",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Observation resources by patient reference - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Observation resources by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 links are present in results...",
											"pm.test(\"Can search for Observation resources by patient reference - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Observation resources by patient reference - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Observation resources by patient reference - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Observation resources by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Can search for Observation resources by patient reference - resources returned are Observation resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Observation\");",
											"});",
											"",
											"//Returned resource reference matches that of patient...",
											"pm.test(\"Can search for Observation resources by patient reference - patient id === patient id searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.subject.reference).to.eql('Patient/' + pm.environment.get(\"fhir_created_patient_id\"));",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var resultIds = pm.environment.get(\"patient_search_result_ids\");",
											"if(typeof resultIds !== 'undefined' && Array.isArray(resultIds) && resultIds.length > 0) {",
											"    resultIds = [];",
											"    pm.environment.set(\"patient_search_result_ids\",resultIds);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Observation?patient=Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Observation"
									],
									"query": [
										{
											"key": "patient",
											"value": "Patient/{{fhir_created_patient_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Observation resources by patient reference and code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Observation resources by patient reference and code - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Observation resources by patient reference and code - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 links are present in results...",
											"pm.test(\"Can search for Observation resources by patient reference and code - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Observation resources by patient reference and code - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Observation resources by patient reference and code - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Observation resources by patient reference and code - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Can search for Observation resources by patient reference and code - resources returned are Observation resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Observation\");",
											"});",
											"//Returned resource reference matches that of patient...",
											"pm.test(\"Can search for Observation resources by patient reference and code - patient id === patient id searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.subject.reference).to.eql('Patient/' + pm.environment.get(\"fhir_created_patient_id\"));",
											"});",
											"//test/lab code matches that which is searched for",
											"pm.test(\"Can search for Observation resources by patient reference and code - lab code matches that which was searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.code.coding[0].code.toString()).to.eql(\"1022571000000108\") &&",
											"        pm.expect(resource.code.coding[0].system).to.eql(\"http://snomed.info/sct\")",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Observation?patient=Patient/{{fhir_created_patient_id}}&code=http://snomed.info/sct|1022571000000108",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Observation"
									],
									"query": [
										{
											"key": "patient",
											"value": "Patient/{{fhir_created_patient_id}}"
										},
										{
											"key": "code",
											"value": "http://snomed.info/sct|1022571000000108"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Observation resources by category",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Observation resources by category - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Observation resources by category - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 links are present in results...",
											"pm.test(\"Can search for Observation resources by category - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Observation resources by category - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Observation resources by category - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Observation resources by category - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Can search for Observation resources by category - resources returned are Observation resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Observation\");",
											"});",
											"//test category is exactly as what was searched for",
											"pm.test(\"Can search for Observation resources by category - observation category matches that which was searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.category[0].coding[0].code).to.eql(\"laboratory\") &&",
											"        pm.expect(resource.category[0].coding[0].system).to.eql(\"http://hl7.org/fhir/observation-category\")",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Observation?category=http://hl7.org/fhir/observation-category|laboratory",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Observation"
									],
									"query": [
										{
											"key": "category",
											"value": "http://hl7.org/fhir/observation-category|laboratory"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Observation resources by category and include patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Observation resources by category and include patient - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Observation resources by category and include patient - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 links are present in results...",
											"pm.test(\"Can search for Observation resources by category and include patient - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Observation resources by category and include patient - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Observation resources by category and include patient - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//2 resources are returned in this page...",
											"pm.test(\"Can search for Observation resources by category and include patient - 2 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Can search for Observation resources by category and include patient - 1st resource returned is an Observation resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Observation\");",
											"});",
											"//test category is exactly as what was searched for",
											"pm.test(\"Can search for Observation resources by category and include patient - 2nd resource returned is a Patient resource\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[1].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Observation?category=http://hl7.org/fhir/observation-category|laboratory&_include=Observation:patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Observation"
									],
									"query": [
										{
											"key": "category",
											"value": "http://hl7.org/fhir/observation-category|laboratory"
										},
										{
											"key": "_include",
											"value": "Observation:patient"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Observation resources by category and include Patient, Encounter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Observation resources by category and include Patient, Encounter - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Observation resources by category and include Patient, Encounter - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 links are present in results...",
											"pm.test(\"Can search for Observation resources by category and include Patient, Encounter - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Observation resources by category and include Patient, Encounter - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Observation resources by category and include Patient, Encounter - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//3 resources are returned in this page...",
											"pm.test(\"Can search for Observation resources by category and include Patient, Encounter - 3 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(3);",
											"});",
											"",
											"pm.test(\"Can search for Observation resources by category and include Patient, Encounter - 1st resource returned is an Observation resource\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Observation\");",
											"});",
											"//test category is exactly as what was searched for",
											"pm.test(\"Can search for Observation resources by category and include Patient, Encounter - Encounter and Patient resoures are present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var entries = jsonData.entry;",
											"    entries.forEach(function(entry) {",
											"        if(entry.resource.resourceType !== 'Observation') {",
											"                pm.expect(entry.resource.resourceType).to.satisfy(function(resourceType) {",
											"                    return resourceType === 'Patient' || resourceType === 'Encounter'",
											"            });",
											"        }",
											"    });",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Observation?category=http://hl7.org/fhir/observation-category|vital-signs&_include=Observation:patient&_include=Observation:encounter",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Observation"
									],
									"query": [
										{
											"key": "category",
											"value": "http://hl7.org/fhir/observation-category|vital-signs"
										},
										{
											"key": "_include",
											"value": "Observation:patient"
										},
										{
											"key": "_include",
											"value": "Observation:encounter"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can Patient search revinclude Observations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Patient search revinclude Observations - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Patient search revinclude Observations - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can Patient search revinclude Observations - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can Patient search revinclude Observations - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can Patient search revinclude Observations - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//3 resources are returned in this page...",
											"pm.test(\"Can Patient search revinclude Observations - 3 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(3);",
											"});",
											"",
											"pm.test(\"Can Patient search revinclude Observations - 1 patient resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"pm.test(\"Can Patient search revinclude Observations - 2 observation resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[1].resource.resourceType).to.eql(\"Observation\");",
											"    pm.expect(jsonData.entry[2].resource.resourceType).to.eql(\"Observation\");",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var resultIds = pm.environment.get(\"patient_search_result_ids\");",
											"if(typeof resultIds !== 'undefined' && Array.isArray(resultIds) && resultIds.length > 0) {",
											"    resultIds = [];",
											"    pm.environment.set(\"patient_search_result_ids\",resultIds);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?_id={{fhir_created_patient_id}}&_revinclude=Observation:patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{fhir_created_patient_id}}"
										},
										{
											"key": "_revinclude",
											"value": "Observation:patient"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Condition resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create a Condition resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create a Condition resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Condition\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create a Condition resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_condition_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create a Condition resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create a Condition resource - Location header is present and in correct format /Condition/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_condition_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create a Condition resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"resourceType\": \"Condition\",\n\t\"meta\": {\n\t\t\"profile\": [\n\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Condition-1\"\n\t\t]\n\t},\n\t\"identifier\": [{\n\t\t\"system\": \"https://fhir.leedsth.nhs.uk/Id/condition\",\n\t\t\"value\": \"10046\"\n\t}],\n\t\"clinicalStatus\": \"recurrence\",\n    \"category\": [\n        {\n            \"coding\": [\n                {\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-ConditionCategory-1\",\n                    \"code\": \"encounter-diagnosis\",\n                    \"display\": \"Encounter Diagnosis\"\n                }\n            ],\n            \"text\": \"Encounter Diagnosis\"\n        }\n    ],\n\t\"code\": {\n\t\t\"coding\": [{\n\t\t\t\"system\": \"http://snomed.info/sct\",\n\t\t\t\"code\": \"452071000000109\",\n\t\t\t\"display\": \"Problems with sight\"\n\t\t}],\n\t\t\"text\": \"Problems with sight\"\n\t},\n\t\"subject\": {\n\t\t\"reference\": \"Patient/{{fhir_created_patient_id}}\",\n\t\t\"identifier\": {\n\t\t\t\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t\"value\": \"{{lastTestNHSNumber}}\"\n\t\t}\n\t},\n\t\"onsetDateTime\": \"2018-07-31T23:00:00+00:00\",\n\t\"assertedDate\": \"2018-07-31T23:00:00+00:00\",\n\t\"context\": {\n\t\t\"reference\": \"Encounter/{{fhir_created_encounter_id}}\"\n\t},\n\t\"asserter\": {\n\t\t\"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\n\t\t\"display\": \"Dr JE Fildes\"\n\t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Condition",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Condition"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can Patient search revinclude Condition",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Patient search revinclude Condition - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Patient search revinclude Condition - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can Patient search revinclude Condition - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can Patient search revinclude Condition - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can Patient search revinclude Condition - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//3 resources are returned in this page...",
											"pm.test(\"Can Patient search revinclude Condition - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Can Patient search revinclude Condition - 1 patient resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"pm.test(\"Can Patient search revinclude Condition - 1 condition resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[1].resource.resourceType).to.eql(\"Condition\");",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?_id={{fhir_created_patient_id}}&_revinclude=Condition:patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{fhir_created_patient_id}}"
										},
										{
											"key": "_revinclude",
											"value": "Condition:patient"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Condition by category and include referenced Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Condition by category and include referenced Patient - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Condition by category and include referenced Patient - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for Condition by category and include referenced Patient - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Condition by category and include referenced Patient - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Condition by category and include referenced Patient - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Condition by category and include referenced Patient - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Can search for Condition by category and include referenced Patient - Category code === that which was searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.category[0].coding[0].code).to.eql(\"encounter-diagnosis\");",
											"});",
											"",
											"pm.test(\"Can search for Condition by category and include referenced Patient - 1 Condition resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Condition\");",
											"});",
											"",
											"pm.test(\"Can search for Condition by category and include referenced Patient - 1 Patient resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[1].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Condition?category=https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-ConditionCategory-1|encounter-diagnosis&_include=Condition:patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Condition"
									],
									"query": [
										{
											"key": "category",
											"value": "https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-ConditionCategory-1|encounter-diagnosis"
										},
										{
											"key": "_include",
											"value": "Condition:patient"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Condition by status and include referenced Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Condition by status and include referenced Patient - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Condition by status and include referenced Patient - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for Condition by status and include referenced Patient - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Condition by status and include referenced Patient - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Condition by status and include referenced Patient - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Condition by status and include referenced Patient - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Can search for Condition by status and include referenced Patient - Category code === that which was searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.clinicalStatus).to.eql(\"recurrence\");",
											"});",
											"",
											"pm.test(\"Can search for Condition by status and include referenced Patient - 1 Condition resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Condition\");",
											"});",
											"",
											"pm.test(\"Can search for Condition by status and include referenced Patient - 1 Patient resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[1].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Condition?clinical-status=recurrence&_include=Condition:patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Condition"
									],
									"query": [
										{
											"key": "clinical-status",
											"value": "recurrence"
										},
										{
											"key": "_include",
											"value": "Condition:patient"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Condition by identifier and include referenced Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Condition by identifier and include referenced Patient - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Condition by identifier and include referenced Patient - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for Condition by identifier and include referenced Patient - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Condition by identifier and include referenced Patient - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Condition by identifier and include referenced Patient - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Condition by identifier and include referenced Patient - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Can search for Condition by identifier and include referenced Patient - identifier system and value === that which was searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.identifier[0].system).to.eql(\"https://fhir.leedsth.nhs.uk/Id/condition\") && pm.expect(resource.identifier[0].value.toString()).to.eql(\"10046\");",
											"});",
											"",
											"pm.test(\"Can search for Condition by identifier and include referenced Patient - 1 Condition resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Condition\");",
											"});",
											"",
											"pm.test(\"Can search for Condition by identifier and include referenced Patient - 1 Patient resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[1].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Condition?identifier=https://fhir.leedsth.nhs.uk/Id/condition|10046&_include=Condition:patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Condition"
									],
									"query": [
										{
											"key": "identifier",
											"value": "https://fhir.leedsth.nhs.uk/Id/condition|10046"
										},
										{
											"key": "_include",
											"value": "Condition:patient"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Procedure resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create a Procedure resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create a Procedure resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Procedure\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create a Procedure resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_procedure_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create a Procedure resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create a Procedure resource - Location header is present and in correct format /Procedure/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Procedure/\" + pm.environment.get(\"fhir_created_procedure_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create a Procedure resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n \t\"resourceType\": \"Procedure\",\n \t\"meta\": {\n \t\t\"profile\": [\n \t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Procedure-1\"\n \t\t]\n \t},\n \t\"identifier\": [{\n \t\t\"system\": \"https://fhir.leedsth.nhs.uk/Id/procedure\",\n \t\t\"value\": \"100009\"\n \t}],\n \t\"status\": \"completed\",\n \t\"notDone\": false,\n\t\"category\": {\n        \"coding\": [\n            {\n                \"system\": \"http://snomed.info/sct\",\n                \"code\": \"387713003\",\n                \"display\": \"Surgical procedure\"\n            }\n        ]\n    },\n    \"code\": {\n        \"coding\": [\n            {\n                \"system\": \"http://snomed.info/sct\",\n                \"code\": \"713348007\",\n                \"display\": \"Thermoplasty of bronchus\"\n            }\n        ]\n    },\n \t\"subject\": {\n \t\t\"reference\": \"Patient/{{fhir_created_patient_id}}\",\n\t\t\"identifier\": {\n\t\t\t\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t\"value\": \"{{lastTestNHSNumber}}\"\n\t\t}\n \t},\n \t\"context\": {\n \t\t\"reference\": \"Encounter/{{fhir_created_encounter_id}}\"\n \t},\n \t\"performedDateTime\": \"2019-06-24T09:15:00+00:00\",\n \t\"performer\": [\n            {\n                \"actor\": {\n                    \"reference\": \"Organisation/{{fhir_created_organization_id}}\",\n                    \"display\": \"LEEDS TEACHING HOSPITALS NHS TRUST\"\n                }\n            }\n        ]\n }"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Procedure",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Procedure"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Procedure by identifier and include referenced Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient - identifier system and value === that which was searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.identifier[0].system).to.eql(\"https://fhir.leedsth.nhs.uk/Id/procedure\") && pm.expect(resource.identifier[0].value.toString()).to.eql(\"100009\");",
											"});",
											"",
											"pm.test(\"Can search for Condition by identifier and include referenced Patient - 1 Condition resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Procedure\");",
											"});",
											"",
											"pm.test(\"Can search for Condition by identifier and include referenced Patient - 1 Patient resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[1].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Procedure?identifier=https://fhir.leedsth.nhs.uk/Id/procedure|100009&_include=Procedure:patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Procedure"
									],
									"query": [
										{
											"key": "identifier",
											"value": "https://fhir.leedsth.nhs.uk/Id/procedure|100009"
										},
										{
											"key": "_include",
											"value": "Procedure:patient"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Procedure by identifier and include referenced Patient, Encounter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient, Encounter - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient, Encounter - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient, Encounter - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient, Encounter - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient, Encounter - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient, Encounter - 3 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(3);",
											"});",
											"",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient, Encounter - identifier system and value === that which was searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.identifier[0].system).to.eql(\"https://fhir.leedsth.nhs.uk/Id/procedure\") && pm.expect(resource.identifier[0].value.toString()).to.eql(\"100009\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Procedure?identifier=https://fhir.leedsth.nhs.uk/Id/procedure|100009&_include=Procedure:patient&_include=Procedure:encounter",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Procedure"
									],
									"query": [
										{
											"key": "identifier",
											"value": "https://fhir.leedsth.nhs.uk/Id/procedure|100009"
										},
										{
											"key": "_include",
											"value": "Procedure:patient"
										},
										{
											"key": "_include",
											"value": "Procedure:encounter"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Procedure resources by patient reference",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Procedure resources by patient reference - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Procedure resources by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 links are present in results...",
											"pm.test(\"Can search for Procedure resources by patient reference - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Procedure resources by patient reference - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Procedure resources by patient reference - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Procedure resources by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Can search for Procedure resources by patient reference - resources returned are Observation resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Procedure\");",
											"});",
											"",
											"//Returned resource reference matches that of patient...",
											"pm.test(\"Can search for Procedure resources by patient reference - patient id === patient id searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.subject.reference).to.eql('Patient/' + pm.environment.get(\"fhir_created_patient_id\"));",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Procedure?patient=Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Procedure"
									],
									"query": [
										{
											"key": "patient",
											"value": "Patient/{{fhir_created_patient_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Procedure resources by patient nhs number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Procedure resources by patient nhs number - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Procedure resources by patient nhs number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for Procedure resources by patient nhs number - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Procedure resources by patient nhs number - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Procedure resources by patient nhs number - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Procedure resources by patient nhs number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Can search for Procedure resources by patient nhs number - resources returned are Procedure resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Procedure\");",
											"});",
											"//NHS number matches that of the NHS number searched for",
											"pm.test(\"Can search for Procedure resources by patient nhs number - nhs number === nhs number searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.subject.identifier.value).to.eql(pm.environment.get(\"lastTestNHSNumber\"));",
											"    ",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var resultIds = pm.environment.get(\"patient_search_result_ids\");",
											"if(typeof resultIds !== 'undefined' && Array.isArray(resultIds) && resultIds.length > 0) {",
											"    resultIds = [];",
											"    pm.environment.set(\"patient_search_result_ids\",resultIds);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Procedure?patient=https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Procedure"
									],
									"query": [
										{
											"key": "patient",
											"value": "https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Encounter resources by id and revinclude Procedures",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Encounter resources by id and revinclude Procedures - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Encounter resources by id and revinclude Procedures - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for Encounter resources by id and revinclude Procedures - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Encounter resources by id and revinclude Procedures - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Encounter resources by id and revinclude Procedures - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Encounter resources by id and revinclude Procedures - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Can search for Encounter resources by id and revinclude Procedures - 1st resource returned is an Encounter resource\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Encounter\");",
											"});",
											"",
											"",
											"pm.test(\"Can search for Encounter resources by id and revinclude Procedures - Encounter search mode === 'match'\", function () {",
											"    var jsonData = pm.response.json();",
											"    var entry = jsonData.entry[0];",
											"    pm.expect(entry.search.mode).to.eql('match');",
											"});",
											"",
											"pm.test(\"Can search for Encounter resources by id and revinclude Procedures - 2nd resource returned is a Proecure resource\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[1].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Procedure\");",
											"});",
											"",
											"pm.test(\"Can search for Encounter resources by id and revinclude Procedures - Procedure references correct Encounter\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[1].resource;",
											"    pm.expect(resource.context.reference).to.eql('Encounter/' + jsonData.entry[0].resource.id);",
											"});",
											"",
											"pm.test(\"Can search for Encounter resources by id and revinclude Procedures - Procedure search mode === 'include'\", function () {",
											"    var jsonData = pm.response.json();",
											"    var entry = jsonData.entry[1];",
											"    pm.expect(entry.search.mode).to.eql('include');",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var resultIds = pm.environment.get(\"patient_search_result_ids\");",
											"if(typeof resultIds !== 'undefined' && Array.isArray(resultIds) && resultIds.length > 0) {",
											"    resultIds = [];",
											"    pm.environment.set(\"patient_search_result_ids\",resultIds);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Encounter?_id={{fhir_created_encounter_id}}&_revinclude=Procedure:encounter",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Encounter"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{fhir_created_encounter_id}}"
										},
										{
											"key": "_revinclude",
											"value": "Procedure:encounter"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "metadata",
					"item": [
						{
							"name": "Can get capability statement",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/fhir+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/roqr/metadata",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"roqr",
										"metadata"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}