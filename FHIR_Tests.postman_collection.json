{
	"info": {
		"_postman_id": "ef8d72fd-6089-4d65-a18d-ffb5edd7f032",
		"name": "FHIR_Tests",
		"description": "If you have a self-signed certificate like in our tests then you need to go to file/Settings/Certificates/Add Certificate to add the cert to not disable ssl verification on every request.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8127240"
	},
	"item": [
		{
			"name": "OWASP",
			"item": [
				{
					"name": "API1:2019 Broken Object Level Authorization",
					"item": [
						{
							"name": "Get Patients by enumeration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status Code is 401 --> user is not authorized for Patient\", function () {\r",
											"    pm.response.to.have.status(401) ;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "_oauth2_proxy={{oauth_cookie}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_URL}}/Patient/{{id}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"Patient",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Broken Object Level Authorization occurs when a request to an object can be successfully done even if not authorized to the object.\n\nSelect testfiles/ids.csv and run API1 location."
				},
				{
					"name": "API2:2019 Broken User Authentication",
					"item": [
						{
							"name": "Successfull Retrieval",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"testing Cookie authentication. Should be 200 or 201.\", function () {\r",
											"     pm.expect(pm.response.code).to.be.oneOf([200, 201])\r",
											" });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "_oauth2_proxy={{oauth_cookie}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_URL}}/Patient",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"Patient"
									]
								},
								"description": "Cookie is set in header and the login is done with this"
							},
							"response": []
						},
						{
							"name": "Test empty cookie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Testing with empty oauth cookie. Should be 403 which means forwarding to login.\", function () {\r",
											"     pm.expect(pm.response.code).to.be.oneOf([403])\r",
											" });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_URL}}/Patient",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"Patient"
									]
								},
								"description": "No cookie is in header which makes it necessary to login."
							},
							"response": []
						},
						{
							"name": "Test keyless cookie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Testing without oauth cookiekey. Should be 403 which means forwarding to login.\", function () {\r",
											"     pm.expect(pm.response.code).to.be.oneOf([403])\r",
											" });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "{{oauth_cookie}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_URL}}/Patient",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"Patient"
									]
								},
								"description": "cookie in header is not right formatted which makes it necessary to login."
							},
							"response": []
						},
						{
							"name": "Test valueless cookie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Testing with valueless header oauth cookie. Should be 403 which means forwarding to login.\", function () {\r",
											"     pm.expect(pm.response.code).to.be.oneOf([403])\r",
											" });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "_oauth2_proxy=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_URL}}/Patient",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"Patient"
									]
								},
								"description": "cookie in header is not right formatted which makes it necessary to login."
							},
							"response": []
						},
						{
							"name": "Test wrong cookie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Testing with valueless header oauth cookie. Should be 403 which means forwarding to login.\", function () {\r",
											"     pm.expect(pm.response.code).to.be.oneOf([403])\r",
											" });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"  key: 'Cookie',\r",
											"  value: '_oauth2_proxy=Test' \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "_oauth2_proxy={{oauth_cookie}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{base_URL}}/Patient",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"Patient"
									]
								},
								"description": "The cookie in the header is not used. A Pre-Request skript is used to set a customized header cookie"
							},
							"response": []
						}
					],
					"description": "Occurs when authentication mechanism are not implemented correctly and can be abused."
				},
				{
					"name": "API3:2019 Excessive Data Exposure",
					"item": [
						{
							"name": "responseReference",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"pm.globals.set(\"expectedResponse\",response);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "_oauth2_proxy={{oauth_cookie}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_URL_noTLS}}/Patient/100",
									"host": [
										"{{base_URL_noTLS}}"
									],
									"path": [
										"Patient",
										"100"
									]
								}
							},
							"response": []
						},
						{
							"name": "responseTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response body contains no excessive data while trying to access an unavailable patient id\",() => {\r",
											"    const responsev2 = pm.response.json();\r",
											"    const responsev1 = pm.globals.get(\"expectedResponse\");\r",
											"\r",
											"    delete responsev1.issue[0].diagnostics;\r",
											"    delete responsev2.issue[0].diagnostics;\r",
											"  //delete responsev1.issue;\r",
											"  //delete responsev2.issue;\r",
											"    delete responsev1.text.div;\r",
											"    delete responsev2.text.div;\r",
											"    console.log(responsev1);\r",
											"    console.log(responsev2);\r",
											"    pm.expect(responsev2).to.eql(responsev1); // compare the response from \"responseReference\" with the response from \"responseTest\"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "_oauth2_proxy={{oauth_cookie}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_URL_noTLS}}/Patient/10",
									"host": [
										"{{base_URL_noTLS}}"
									],
									"path": [
										"Patient",
										"10"
									]
								}
							},
							"response": []
						},
						{
							"name": "MetadataExposure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status Code 200 --> testing excessive data exposure for meta data. Should fail in production but it exposes the meta data here\", function () {\r",
											"     pm.expect(pm.response.code).to.be.oneOf([200])\r",
											" });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "_oauth2_proxy={{oauth_cookie}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_URL_noTLS}}/metadata",
									"host": [
										"{{base_URL_noTLS}}"
									],
									"path": [
										"metadata"
									]
								}
							},
							"response": []
						}
					],
					"description": "Occurs when object properties are exposed without checking the data sensitivity and rely on the client to filter only the data they need."
				},
				{
					"name": "API4:2019 Lack of Resources & Rate Limiting",
					"item": [
						{
							"name": "Retrieve Patients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status Code is 429 --> Rate limiting works\", function () {\r",
											"    pm.response.to.have.status(429) ;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "_oauth2_proxy={{oauth_cookie}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_URL}}/Patient/",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"Patient",
										""
									]
								},
								"description": "When retrieving a resources multiple times a rate limiting should be triggered at one to not come to the point where the system resources are depleted.\n\nDon't be confused by the test result since every successfull request will result in a test result error since only 429 statuscode is tested for rate limiting.\n\nSo that means if there are some pass results the Rate limiting works since 429 is returned.\n\nThis was tested with 50 iterations and a rate limit of 10 requests per second.\n\nThis is an example of a nginx config with rate limit\n\n```\nhttp {\n\n  limit_req_zone $binary_remote_addr zone=ratelimit:1m rate=10r/s;\n  limit_req_status 429;\n  \n  server {\n    listen 80;\n\n    location / {\n      limit_req zone=ratelimit;\n      proxy_pass http://hapi-fhir-jpaserver-start:8080/;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header X-Forwarded-Proto $scheme;\n      proxy_set_header   Host $http_host;\n    }\n\n      \n  }\n}\n\n```"
							},
							"response": []
						}
					],
					"description": "Occurs when a client can use a lot of the server resources which then leads to DoS and also makes brute force possible.\n\nTo Test this:\n\nGo to API4:2019 Folder.\n\nClick \"Run\"\n\nSelect Iterations\n\nWait for Testresults to return status 429"
				},
				{
					"name": "API5:2019 Broken Function Level Authorization",
					"item": [
						{
							"name": "Get as admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status Code is 200 --> Is admin user and allowed on \" + pm.iterationData.get(\"admin_path\"), function () {\r",
											"    pm.response.to.have.status(200) ;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "_oauth2_proxy={{oauth_cookie}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_URL}}{{admin_path}}",
									"host": [
										"{{base_URL}}{{admin_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Options as admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status Code is 200 --> Is admin user and allowed on CapabilityStatement\", function () {\r",
											"    pm.response.to.have.status(200) ;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "OPTIONS",
								"header": [
									{
										"key": "Cookie",
										"value": "_oauth2_proxy={{oauth_cookie}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_URL}}",
									"host": [
										"{{base_URL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get as regular user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status Code is 401 --> Unauthorized is not allowed on \" + pm.iterationData.get(\"admin_path\"), function () {\r",
											"    pm.response.to.have.status(401) ;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "_oauth2_proxy={{oauth_cookie_regular_user}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_URL}}{{admin_path}}",
									"host": [
										"{{base_URL}}{{admin_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Options as regular user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status Code is 401 --> Unauthorized is not allowed on Capability Statement\", function () {\r",
											"    pm.response.to.have.status(401) ;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "OPTIONS",
								"header": [
									{
										"key": "Cookie",
										"value": "_oauth2_proxy={{oauth_cookie_regular_user}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_URL}}",
									"host": [
										"{{base_URL}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Occurs when the access control policy is not clear which then leads to administrative access when not in admin mode.\n\nGo To the API:5 Folder and click run.\n\nSelect the file testfiles/admin_paths.csv with a delay (due to ratelimiting) and check if you don't allow admin_paths for non admin users"
				},
				{
					"name": "API6:2019 Mass Assignment",
					"item": [
						{
							"name": "ResourceManipulation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status Code and 400 --> testing mass assignment. Should fail\", function () {\r",
											"     pm.expect(pm.response.code).to.be.oneOf([400, 404])\r",
											" });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"value": "_oauth2_proxy={{oauth_cookie}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceType\": \"Practitioner\",\r\n    \"isAdmin\": \"true\",\r\n    \"id\": \"1\",\r\n    \"active\":\"true\",\r\n    \"name\":[\r\n      {\r\n          \"use\":\"official\",\r\n          \"given\":\"Babo\",\r\n          \"family\":\"Babu\",\r\n          \"prefix\":\"Deee\"\r\n      }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL_noTLS}}/Practitioner/1",
									"host": [
										"{{base_URL_noTLS}}"
									],
									"path": [
										"Practitioner",
										"1"
									]
								},
								"description": "The Patient resource tries to manipulate the attribute i.e. the request body by substituting the \"patient\" resource with \"practitioner\"."
							},
							"response": []
						}
					],
					"description": "Occurs when objects from client requests are not filtered by an allowlist and therefore an attack by modifying object properties is possible."
				},
				{
					"name": "API7:2019 Security Misconfiguration",
					"item": [
						{
							"name": "CORS",
							"item": [
								{
									"name": "Basic Origin Reflection Test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"checks if malicious origin is in allowed origin list\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).not.equal(pm.iterationData.get(\"malicious_origin\"))\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"checks allow origin is not star\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).not.equal(\"*\")\r",
													"});\r",
													"\r",
													"pm.test(\"checks allow credential is disabled\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Credentials\")).to.be.oneOf([undefined,'false'])\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "Go To the CORS Folder and click run.\n\nSelect the file testfiles/malicious_origin.csv with a delay (due to ratelimiting) and check if you don't use allow origin all or a malicious origin"
									},
									"response": []
								},
								{
									"name": "Trusted null Origin Test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"checks allow origin not null\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).not.equal(\"null\")\r",
													"});\r",
													"\r",
													"pm.test(\"checks allowed origin exist\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).exist\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "null",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "Run test directly to check if the server has allow origin set"
									},
									"response": []
								}
							],
							"description": "Taken from: [https://www.postman.com/postman/workspace/postman-security-workspace/collection/5917351-b6f22d43-2a6f-4ee3-a12e-617127987caf](https://www.postman.com/postman/workspace/postman-security-workspace/collection/5917351-b6f22d43-2a6f-4ee3-a12e-617127987caf)"
						},
						{
							"name": "Security Headers",
							"item": [
								{
									"name": "Security Headers Test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('checks for Content-Security-Policy header', function () {\r",
													"  pm.expect(pm.response.headers.get('Content-Security-Policy')).not.equal(undefined);\r",
													"});\r",
													"\r",
													"pm.test('checks if Content-Security-Policy header is self', function () {\r",
													"  pm.expect(pm.response.headers.get('Content-Security-Policy')).equal(\"self\");\r",
													"});\r",
													"\r",
													"pm.test(\"checks for X-Frame-Options header\", function() {\r",
													"    pm.expect(pm.response.headers.get('X-Frame-Options')).not.equal(undefined);\r",
													"});\r",
													"\r",
													"pm.test(\"checks if X-Frame-Options header is deny\", function() {\r",
													"    const header = pm.response.headers.get(\"X-Frame-Options\")||\"\"\r",
													"    pm.expect(header).equal('DENY')\r",
													"});\r",
													"\r",
													"pm.test(\"checks for Strict-Transport-Security header\", function() {\r",
													"    pm.expect(pm.response.headers.get('Strict-Transport-Security')).not.equal(undefined);\r",
													"});\r",
													"\r",
													"pm.test(\"checks for max-age in Strict-Transport-Security header\", function() {\r",
													"    const header = pm.response.headers.get(\"Strict-Transport-Security\")||\"\"\r",
													"    pm.expect(header).contains(\"max-age\")\r",
													"});\r",
													"\r",
													"pm.test(\"checks for includeSubDomains in Strict-Transport-Security header\", function() {\r",
													"    const header = pm.response.headers.get(\"Strict-Transport-Security\")||\"\"\r",
													"    pm.expect(header).contains(\"includeSubDomains\")\r",
													"});\r",
													"\r",
													"pm.test(\"checks for X-XSS-Protection header\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"X-XSS-Protection\")).not.equal(undefined)\r",
													"});\r",
													"\r",
													"pm.test(\"checks for 1;mode=block in X-XSS-Protection header\", function() {\r",
													"    const header = pm.response.headers.get(\"X-XSS-Protection\")||\"\"\r",
													"    pm.expect(header).contains(\"1; mode=block\")\r",
													"});\r",
													"\r",
													"pm.test(\"checks for Expect-CT header\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Expect-CT\")).not.equal(undefined)\r",
													"});\r",
													"\r",
													"pm.test(\"checks for max-age in Expect-CT header\", function() {\r",
													"    const header = pm.response.headers.get(\"Expect-CT\")||\"\"\r",
													"    pm.expect(header).contains(\"max-age\")\r",
													"});\r",
													"\r",
													"pm.test(\"checks for enforce in Expect-CT header\", function() {\r",
													"    const header = pm.response.headers.get(\"Expect-CT\")||\"\"\r",
													"    pm.expect(header).contains(\"enforce\")\r",
													"});\r",
													"\r",
													"pm.test(\"checks for X-Content-Type-Options header\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"X-Content-Type-Options\")).not.equal(undefined)\r",
													"});\r",
													"\r",
													"pm.test(\"checks for nosniff in X-Content-Type-Options header\", function() {\r",
													"    const header = pm.response.headers.get(\"X-Content-Type-Options\")||\"\"\r",
													"    pm.expect(header).contains(\"nosniff\")\r",
													"});\r",
													"\r",
													"pm.test(\"checks for Referrer-Policy header\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Referrer-Policy\")).not.equal(undefined)\r",
													"});\r",
													"\r",
													"pm.test(\"checks for no-referrer in Referrer-Policy header\", function() {\r",
													"    const header = pm.response.headers.get(\"Referrer-Policy\")||\"\"\r",
													"    pm.expect(header).contains(\"no-referrer\")\r",
													"});\r",
													"\r",
													"pm.test(\"checks for Cross-Origin-Embedder-Policy header\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Cross-Origin-Embedder-Policy\")).not.equal(undefined)\r",
													"});\r",
													"\r",
													"pm.test(\"checks for require-corp in Cross-Origin-Embedder-Policy header\", function() {\r",
													"    const header = pm.response.headers.get(\"Cross-Origin-Embedder-Policy\")||\"\"\r",
													"    pm.expect(header).contains(\"require-corp\")\r",
													"});\r",
													"\r",
													"pm.test(\"checks for Cross-Origin-Opener-Policy header\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Cross-Origin-Opener-Policy\")).not.equal(undefined)\r",
													"});\r",
													"\r",
													"pm.test(\"checks for same-origin in Cross-Origin-Opener-Policy header\", function() {\r",
													"    const header = pm.response.headers.get(\"Cross-Origin-Opener-Policy\")||\"\"\r",
													"    pm.expect(header).contains(\"same-origin\")\r",
													"});\r",
													"\r",
													"pm.test(\"checks for Cross-Origin-Resource-Policy header\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Cross-Origin-Resource-Policy\")).not.equal(undefined)\r",
													"});\r",
													"\r",
													"pm.test(\"checks for same-origin in Cross-Origin-Resource-Policy header\", function() {\r",
													"    const header = pm.response.headers.get(\"Cross-Origin-Resource-Policy\")||\"\"\r",
													"    pm.expect(header).contains(\"same-origin\")\r",
													"});\r",
													"\r",
													"pm.test(\"checks for undefined Powered-By header\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"X-Powered-By\")).equal(undefined)\r",
													"});\r",
													"\r",
													"pm.test(\"checks for Versions in Server header\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Server\")).not.match(/[0-9]/)\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "You can run this test directly"
									},
									"response": []
								}
							],
							"description": "This Test check for some security headers to set in your config.\n\nExample nginx can be seen here:\n\n```\nadd_header 'Access-Control-Allow-Origin' 'localhost';\nadd_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, OPTIONS';\nadd_header Content-Security-Policy \"default-src 'self';\";\nadd_header X-Frame-Options \"DENY\";\nadd_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\nadd_header X-XSS-Protection \"1; mode=block\";\nadd_header Expect-CT \"enforce, max-age=300, report-uri='https://localhost/'\";\nadd_header X-Content-Type-Options nosniff;\nadd_header 'Referrer-Policy' 'strict-origin-when-cross-origin';\nadd_header Permissions-Policy \"geolocation=(),midi=(),sync-xhr=(),microphone=(),camera=(),magnetometer=(),gyroscope=(),fullscreen=(self),payment=()\";\nadd_header Set-Cookie \"Path=/; HttpOnly; Secure\";\nadd_header Public-Key-Pins 'pin-sha256=\"PRIMARY-PIN\"; pin-sha256=\"BACKUP-PIN\"; max-age=300; includeSubDomains';\nadd_header X-Permitted-Cross-Domain-Policies master-only;\nadd_header Cross-Origin-Embedder-Policy require-corp;\nadd_header Cross-Origin-Opener-Policy same-origin;\nadd_header Cross-Origin-Resource-Policy same-origin;\nexpires 1y;\nadd_header Cache-Control \"must-revalidate\";\nproxy_hide_header X-Powered-By;\nserver_tokens off;\n\n```"
						}
					],
					"description": "Occurs when the configuration is incompleted of misconfigured (HTTP Headers, HTTP Methods, CORS,...)"
				},
				{
					"name": "API8:2019 Injection",
					"item": [
						{
							"name": "os_command_injection_endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status Code 404 and 400 --> testing os command injection for unix. Should fail\", function () {\r",
											"     pm.expect(pm.response.code).to.be.oneOf([400, 404])\r",
											" });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL_noTLS}}/Patient/{{os-command-injection-endpoint}}",
									"host": [
										"{{base_URL_noTLS}}"
									],
									"path": [
										"Patient",
										"{{os-command-injection-endpoint}}"
									]
								},
								"description": "A list of 103 unix commands are used to to test the \"os command injection\". The payload list was taken from the follwoing Github source:\n\n[https://github.com/payloadbox/command-injection-payload-list](https://github.com/payloadbox/command-injection-payload-list)\n\nWhile testing the api with the payload all the tests must pass with the following status codes:\n\n400\n\nor\n\n404\n\nif anyother status code such as 200 appear, then there must be a vulnerability."
							},
							"response": []
						},
						{
							"name": "os_command_injection_endpoint Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var body = JSON.parse(responseBody);\r",
											"tests[\"Count: \"  + body.value.length] = true;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL_noTLS}}/Patient/21",
									"host": [
										"{{base_URL_noTLS}}"
									],
									"path": [
										"Patient",
										"21"
									]
								},
								"description": "A list of 103 unix commands are used to to test the \"os command injection\". The payload list was taken from the follwoing Github source:\n\n[https://github.com/payloadbox/command-injection-payload-list](https://github.com/payloadbox/command-injection-payload-list)\n\nWhile testing the api with the payload all the tests must pass with the following status codes:\n\n400\n\nor\n\n404\n\nif anyother status code such as 200 appear, then there must be a vulnerability."
							},
							"response": []
						},
						{
							"name": "sql-injection-endpoints",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status Code 404 and 400 --> testing sql injection. Should fail\", function () {\r",
											"     pm.expect(pm.response.code).to.be.oneOf([400, 404])\r",
											" });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL_noTLS}}/{{sql-injection-endpoint}}",
									"host": [
										"{{base_URL_noTLS}}"
									],
									"path": [
										"{{sql-injection-endpoint}}"
									]
								},
								"description": "Some basic sql injection statements are tested using the following authorization bypassing payload from the Github:\n\n[https://github.com/payloadbox/sql-injection-payload-list/blob/master/Intruder/exploit/Auth_Bypass.txt](https://github.com/payloadbox/sql-injection-payload-list/blob/master/Intruder/exploit/Auth_Bypass.txt)\n\nThe list contains 98 sql statements"
							},
							"response": []
						}
					],
					"description": "Occurs when input is not validated and makes injectsion like SQL or command injections possible."
				},
				{
					"name": "API9:2019 Improper Assets Management",
					"item": [],
					"description": "Occurs when endpoints are exposed which doesn't need to be exposed which makes it easier for attackers to gain information.\n\nCan't be automated tested since you need to have an up-to-date inventory of you API's.\n\nYou need to restric API access and also access to production data.\n\nYou need to retire old API's.\n\netc."
				},
				{
					"name": "API10:2019 Insufficient Logging & Monitoring",
					"item": [],
					"description": "Occurs when logging and monitoring is not complete or integrated into incident response which makes attacks less likely to be discovered.\n\nCan't be tested with Postman so you need to send other requests and then check for logs.\n\nCheck that the requestor is logged with the sourceIP an action which was made with a timestamp.\n\nAdditionally, an incident response and disaster recovery need to be in-place to have a recovery mechanism.\n\nYou also need to make sure that the logging solution does not log only sensitive data which could be extracted by an attacker."
				}
			],
			"description": "Collection of Requests to test OWASP API Top 10 [https://owasp.org/www-project-api-security/](https://owasp.org/www-project-api-security/)"
		},
		{
			"name": "TLS",
			"item": [
				{
					"name": "Versions",
					"item": [
						{
							"name": "Check if TLS 1.0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status Code is 200\", function () {\r",
											"    pm.response.to.have.status(200) ;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"tlsDisabledProtocols": [
									"TLSv1_1",
									"TLSv1_2",
									"TLSv1_3"
								]
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "_oauth2_proxy={{oauth_cookie}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_URL}}/Patient",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"Patient"
									]
								},
								"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
							},
							"response": []
						},
						{
							"name": "Check if TLS 1.1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status Code is 200\", function () {\r",
											"    pm.response.to.have.status(200) ;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"tlsDisabledProtocols": [
									"TLSv1",
									"TLSv1_2",
									"TLSv1_3"
								]
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "_oauth2_proxy={{oauth_cookie}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_URL}}/Patient",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"Patient"
									]
								},
								"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
							},
							"response": []
						},
						{
							"name": "Check if TLS >= 1.2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status Code is 200\", function () {\r",
											"    pm.response.to.have.status(200) ;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"tlsDisabledProtocols": [
									"TLSv1",
									"TLSv1_1"
								]
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "_oauth2_proxy={{oauth_cookie}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_URL}}/Patient",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"Patient"
									]
								},
								"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
							},
							"response": []
						}
					]
				},
				{
					"name": "Ciphers",
					"item": [
						{
							"name": "TLS Version 1.2",
							"item": [
								{
									"name": "Test_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status Code is 200\", function () {\r",
													"    pm.response.to.have.status(200) ;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"tlsCipherSelection": [
											"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"
										]
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
									},
									"response": []
								},
								{
									"name": "Test_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status Code is 200\", function () {\r",
													"    pm.response.to.have.status(200) ;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"tlsCipherSelection": [
											"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
										]
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
									},
									"response": []
								},
								{
									"name": "Test_TLS_DHE_DSS_ WITH_AES_256_GCM_SHA384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status Code is 200\", function () {\r",
													"    pm.response.to.have.status(200) ;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"tlsCipherSelection": [
											"TLS_DHE_DSS_WITH_AES_256_GCM_SHA384"
										]
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
									},
									"response": []
								},
								{
									"name": "Test_TLS_DHE_RSA_ WITH_AES_256_GCM_SHA384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status Code is 200\", function () {\r",
													"    pm.response.to.have.status(200) ;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"tlsCipherSelection": [
											"TLS_DHE_RSA_WITH_AES_256_GCM_SHA384"
										]
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
									},
									"response": []
								},
								{
									"name": "Test_TLS_ECDHE_ECDSA_WITH_CHACHA20POLY1305_SHA256",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status Code is 200\", function () {\r",
													"    pm.response.to.have.status(200) ;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"tlsCipherSelection": [
											"TLS_ECDHE_ECDSA_WITH_CHACHA20POLY1305_SHA256"
										]
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
									},
									"response": []
								},
								{
									"name": "Test_TLS_ECDHE_RSA_WITH_CHACHA20POLY1305_SHA256",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status Code is 200\", function () {\r",
													"    pm.response.to.have.status(200) ;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"tlsCipherSelection": [
											"TLS_ECDHE_RSA_WITH_CHACHA20POLY1305_SHA256"
										]
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
									},
									"response": []
								},
								{
									"name": "Test_TLS_DHE_RSA_WITH_CHACHA20POLY1305_SHA256",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status Code is 200\", function () {\r",
													"    pm.response.to.have.status(200) ;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"tlsCipherSelection": [
											"TLS_DHE_RSA_WITH_CHACHA20POLY1305_SHA256"
										]
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
									},
									"response": []
								},
								{
									"name": "Test_TLS_ECDHE_ECDSA_WITH_AES_256_CCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status Code is 200\", function () {\r",
													"    pm.response.to.have.status(200) ;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"tlsCipherSelection": [
											"TLS_ECDHE_ECDSA_WITH_AES_256_CCM"
										]
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
									},
									"response": []
								},
								{
									"name": "Test_TLS_DHE_RSA_ WITH_AES_256_CCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status Code is 200\", function () {\r",
													"    pm.response.to.have.status(200) ;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"tlsCipherSelection": [
											"TLS_DHE_RSA_WITH_AES_256_CCM"
										]
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
									},
									"response": []
								},
								{
									"name": "Test_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status Code is 200\", function () {\r",
													"    pm.response.to.have.status(200) ;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"tlsCipherSelection": [
											"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"
										]
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
									},
									"response": []
								},
								{
									"name": "Test_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status Code is 200\", function () {\r",
													"    pm.response.to.have.status(200) ;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"tlsCipherSelection": [
											"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
										]
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
									},
									"response": []
								},
								{
									"name": "Test_TLS_DHE_DSS_ WITH_AES_128_GCM_SHA256",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status Code is 200\", function () {\r",
													"    pm.response.to.have.status(200) ;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"tlsCipherSelection": [
											"TLS_DHE_DSS_WITH_AES_128_GCM_SHA256"
										]
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
									},
									"response": []
								},
								{
									"name": "Test_TLS_DHE_RSA_ WITH_AES_128_GCM_SHA256",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status Code is 200\", function () {\r",
													"    pm.response.to.have.status(200) ;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"tlsCipherSelection": [
											"TLS_DHE_RSA_WITH_AES_128_GCM_SHA256"
										]
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
									},
									"response": []
								},
								{
									"name": "Test_TLS_ECDHE_ECDSA_WITH_AES_128_CCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status Code is 200\", function () {\r",
													"    pm.response.to.have.status(200) ;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"tlsCipherSelection": [
											"TLS_ECDHE_ECDSA_WITH_AES_128_CCM"
										]
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
									},
									"response": []
								},
								{
									"name": "Test_TLS_DHE_RSA_ WITH_AES_128_CCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status Code is 200\", function () {\r",
													"    pm.response.to.have.status(200) ;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"tlsCipherSelection": [
											"TLS_DHE_RSA_WITH_AES_128_CCM"
										]
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
									},
									"response": []
								},
								{
									"name": "Test_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status Code is 200\", function () {\r",
													"    pm.response.to.have.status(200) ;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"tlsCipherSelection": [
											"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384"
										]
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
									},
									"response": []
								},
								{
									"name": "Test_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status Code is 200\", function () {\r",
													"    pm.response.to.have.status(200) ;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"tlsCipherSelection": [
											"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384"
										]
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
									},
									"response": []
								},
								{
									"name": "Test_TLS_DHE_DSS_ WITH_AES_256_CBC_SHA256",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status Code is 200\", function () {\r",
													"    pm.response.to.have.status(200) ;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"tlsCipherSelection": [
											"TLS_DHE_DSS_WITH_AES_256_CBC_SHA256"
										]
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
									},
									"response": []
								},
								{
									"name": "Test_TLS_DHE_RSA_ WITH_AES_256_CBC_SHA256",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status Code is 200\", function () {\r",
													"    pm.response.to.have.status(200) ;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"tlsCipherSelection": [
											"TLS_DHE_RSA_WITH_AES_256_CBC_SHA256"
										]
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
									},
									"response": []
								},
								{
									"name": "Test_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status Code is 200\", function () {\r",
													"    pm.response.to.have.status(200) ;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"tlsCipherSelection": [
											"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256"
										]
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
									},
									"response": []
								},
								{
									"name": "Test_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status Code is 200\", function () {\r",
													"    pm.response.to.have.status(200) ;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"tlsCipherSelection": [
											"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"
										]
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
									},
									"response": []
								},
								{
									"name": "Test_TLS_DHE_DSS_ WITH_AES_128_CBC_SHA256",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status Code is 200\", function () {\r",
													"    pm.response.to.have.status(200) ;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"tlsCipherSelection": [
											"TLS_DHE_DSS_WITH_AES_128_CBC_SHA256"
										]
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
									},
									"response": []
								},
								{
									"name": "Test_TLS_DHE_RSA_ WITH_AES_128_CBC_SHA256",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status Code is 200\", function () {\r",
													"    pm.response.to.have.status(200) ;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"tlsCipherSelection": [
											"TLS_DHE_RSA_WITH_AES_128_CBC_SHA256"
										]
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
									},
									"response": []
								}
							]
						},
						{
							"name": "TLS Version 1.3",
							"item": [
								{
									"name": "Test_TLS_CHACHA20_POLY1305_SHA256",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status Code is 200\", function () {\r",
													"    pm.response.to.have.status(200) ;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"tlsCipherSelection": [
											"TLS_CHACHA20_POLY1305_SHA256"
										]
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
									},
									"response": []
								},
								{
									"name": "Test_TLS_AES_256_GCM_SHA384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status Code is 200\", function () {\r",
													"    pm.response.to.have.status(200) ;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"tlsCipherSelection": [
											"TLS_AES_256_GCM_SHA384"
										]
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
									},
									"response": []
								},
								{
									"name": "Test_TLS_AES_128_GCM_SHA256",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status Code is 200\", function () {\r",
													"    pm.response.to.have.status(200) ;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"tlsCipherSelection": [
											"TLS_AES_128_GCM_SHA256"
										]
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "_oauth2_proxy={{oauth_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient"
											]
										},
										"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"description": "When accessing or changing data HTTPS should be used with TLS Version of at least 1.2.\n\nThe following three requests are checking TLS versions.\n\nThe 1.0 should fail if you have configured the server to use >= 1.2\n\nThe 1.1 should fail if you have configured the server to use >= 1.2\n\nThe > 1.2 should be sucessfull if you have configured the server to use >= 1.2\n\nFollowing nginx configuration is an example for setting the tls versions\n\n```\nserver {\n    listen 443 ssl;\n    ssl_certificate     /etc/nginx/localhost.crt;\n    ssl_certificate_key /etc/nginx/localhost.key;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n\n    location / {\n      limit_req zone=ratelimit;\n      proxy_pass http://hapi-fhir-jpaserver-start:8080/;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header X-Forwarded-Proto $scheme;\n      proxy_set_header   Host $http_host;\n    } \n  }\n\n```"
		},
		{
			"name": "DataFeeding_For_Fhir_Server",
			"item": [
				{
					"name": "Create_PatientResource_with_different_Email_address_and_name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let date = Date.now();\r",
									"let name = date;\r",
									"let email = 'ali_'+ date +'_@yahoo.com';\r",
									"pm.environment.set('patientname',name);\r",
									"pm.environment.set('emailaddress', email);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"name\":[\r\n      {\r\n          \"use\":\"official\",\r\n          \"given\":[{{patientname}}],\r\n          \"family\":\"Noori\"\r\n      }\r\n    ],\r\n    \"gender\":\"male\",\r\n    \"birthdate\":\"1994-12-09\",\r\n    \"telecom\":[\r\n        {\r\n            \"value\":\"06769616315\",\r\n            \"use\":\"mobile\",\r\n            \"system\":\"phone\"\r\n        },\r\n        {\r\n            \"system\":\"email\",\r\n            \"value\":\"{{emailaddress}}\"\r\n        }\r\n    ],\r\n    \"address\":[\r\n        {\r\n            \"line\":[\r\n                \"15,Kochgasse\"\r\n            ],\r\n            \"city\":\"Vienna\",\r\n            \"state\":\"Vienna\",\r\n            \"postalcode\":\"1080\"\r\n        }\r\n    ]\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL_noTLS}}/Practitioner/",
							"host": [
								"{{base_URL_noTLS}}"
							],
							"path": [
								"Practitioner",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create_PractitionerResource_with_different_Email_address_and_name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let date = Date.now();\r",
									"let name = date;\r",
									"let email = 'ali_'+ date +'_@yahoo.com';\r",
									"pm.environment.set('patientname',name);\r",
									"pm.environment.set('emailaddress', email);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceType\": \"Practitioner\",\r\n    \"active\":\"true\",\r\n    \"name\":[\r\n      {\r\n          \"use\":\"official\",\r\n          \"given\":\"Babo\",\r\n          \"family\":\"Babu\",\r\n          \"prefix\":\"Dr.\"\r\n      }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL_noTLS}}/Practitioner/",
							"host": [
								"{{base_URL_noTLS}}"
							],
							"path": [
								"Practitioner",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "XSS",
			"item": [
				{
					"name": "Stored XSS on Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status Code is not 201,200 or 203 --> object was not created \", function () {\r",
									"     pm.expect(pm.response.code).to.not.equal(201,200,203)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "_oauth2_proxy={{oauth_cookie}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"resourceType\": \"Patient\",\r\n  \"text\": {\r\n    \"status\": \"generated\",\r\n    \"div\": \"{{body}}\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{base_URL}}/Patient/",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"Patient",
								""
							]
						}
					},
					"response": []
				}
			],
			"description": "Run this folder with the file testfiles/xss_bodies.csv.\n\nThere should be a lot of passes since this means that the request was not successfull."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_URL",
			"value": "https://localhost/fhir",
			"type": "string"
		},
		{
			"key": "base_URL_noTLS",
			"value": "http://localhost:8080/fhir",
			"type": "string"
		},
		{
			"key": "oauth_cookie",
			"value": "bWH59TGZN8M_xm7i1HLsMjND9VrvrR07St4uJXcsTsv0wu5Lgpboi_xmhJPIbW7-SE-m5pWHhOj25QHgws6Iq9VMRH10Ka_uviBPHm9wXmDqNr44SS0CPQGHTLuPr2WxEAutLjKWRA2bzP7jv9uC7Pfr753xcnkV_yFhgjyvyXCr4vR8RmD8aj0DnPpLaR2pqJJB6B5FLCSKpjVwvKrsi93hmnADjhvJzytCK-ZnslB9f3AQPm-gmYmXsIOeagthY8wnUM9YQApMm-y3Ug3GNRnl-u7RCR25G7tJ1eGfG5cdAM50eihZxT9y7a61jrEWjPc57_pdSSS5KQYn0A-zyzUzhPbDkUywnSSpLTF9ldBbcowNlR2AO6QhKSRjBcKIBiAPi1FRrDBSVqt86Ag4gt5GIG2bMQycmITwuGg5QmKODC92Bl5UkxYxWCVaiS-fb59U2PUs84ZgxXQx0vGqyiTnO8tmibWmA1tfDnM6wCN1yacdWXFagwRyH1chPXuNgv-Km-_R2Org3I-gRu5LdNAv7DFEJvmXzkrmhllP1w8FvJRFnTb9Z3yosCvp8QVyZ3qkoUAh_hp_uwAqU6Tg4r7ok5MS_M5VQTYdY37aEqW6U7j_MI04KwkDgSYWNFT_d8cBhgSwtV86oLBzQs0QDsDPYdunPtC5ydSEBHHRCFFKIV7-HULnIjlCKO9P0_KjUgfFQJvnIXwP9B73CsqLBtwC8wq4VDE3uGThZDqFP-6yNAZA9UoWvtDFeS64imRQTSMdJbpYNcGi9aFs6EQArENKKHl9Rm5B6d7T_hgQE9YRljqW7I4YQGxxgaYTw7iezhpJTRw6kaV4WIBnwuvQP2sZD-H9MBQ4D1pGfAR6Y1kaSArq6tGe6nVKSoILhphz3ireIeDxoWg9Nd0MCBvgNoZdd5NU6xru_XV9sy6SFvbMDtkHaQ_tT-yNjGrM4AQtjGPlbZ6PDxhJekZcj8O70aW6qhuD7jKmNrWWvwKulqDrheVoVBpI-KLtZgxpARt5bYDF_8p5UIO9zNPVBcz-hGtjHOHOyWQKIcB_kgnr7ezugxzF4dZAWifO0fXQEKvAz6_Eh2ajU365aJgER4tGT52QWB2xGMmvfTICggz4jDhP5y5ZNP0BMqlpHGWtvaYS0148n1JIS0JQve-89ODF1a6GhrTrcr3e1E53jgSxPM1RsydVib70Ijl2zMFXDJtONDRlLEYL9ezFOh4xGRCOKTkoefjEPPGYjSMaLGtS4VJhpb8hmVsQvAUB2ek4ivPX9kM05Q269KrNchFHul9CsuwSwLU4ogOFivW3XjqfCf3XdWfkvXDMsWx-jzz9hqCwdhJ309tgVdcuD-a1DGpTtF2tav8lEuGz1rTK2kQNS5dy9gkg2FvmHtUI8jSibMPEx8jRQmkhayipnEMbnVfdKh79Miw8gBSZGaJQ6sz3ooEU9CFlyEBctB3owpY40zNOusbuaNSGqlBVEKfnCg1RC_M6E-3AQ-kpxM4RhYfOJZUrBVShXqZ_iLe1rfOlP-ySUXxTZXdRK-OiOhRPRTtEsrySCKS7ESfuJcmNvNwuMw-BW8s87m_y9JwONui3yqHF9HeEFVMhN5mK-tBla1-jlvD6gLiZfk9Z3WaLm2kN00kjFgZ7oBfFeapijgfFlauVO97OsZOJ2ytmk50VqrMUrnEjwSeH1_FzqqbiQKUlhMAupx6yHyKsEvuCmt2t-sY_IIXluRG-YWcORcs3IFja3rW_4ibtAlAxfySQgFfZZFM3Q5USiHkUIcwlrh7trl2ISX_drzvgJ2lhlGX3AjZtSC9ayQ==|1647086827|23Ok_2pu7qzGUftYwJI0Ki1zxgre3DGDmYNIr-ng3jQ=",
			"type": "string"
		},
		{
			"key": "oauth_cookie_regular_user",
			"value": "h4IZohWX3Aa81mQgn7bguhE0hkqKsukTRCbsHg9GrvEHRfBznGJz-x1oAlr5rOPI2IFnqvkpv-H2x-bSFdDw6schak99vT9OF1IqGSE_VrLP6rDfREPwC13Kavas8uAzG5G1pv9AoVYZqw5bLmBWFeFCZPPHFkhQ9r-nRkdxWZItd0k6VDU1H0YlItoay0EXfeAPcJ7_9_hSrmPl2fy291THCmFxCu7-GCgJqCJEOFrm_-d398rIDeOD9j4Xsfb-mm91uf34uIvxPDx0XsCZXrYGrCuuL7TF9_MUNLKN-VMUo83EKO3MJu2nOWWEqHeb8SqZzq2Oov2HIgqfbXnnhWL-QUfC63UD4wCn7507Nfg_2iNPsXyz_0IgYqTBgjeAq2bfwzBvsbf2VTtNvgRjtmTpr10KAZ1wy9dHdkzBdOEEPdF2w3hsrGOpL_DqA236Ocfkesk48oPi5re7Ljv9x1nL6PwA78Dk3Ldxoj7H_OrXUVkbs7Wui62SVWOLw8QWlyEsbgl5C2V5J7nJTQyfMLPYvZ7FCxHzO7qJP54rnXe5w25XaciIxAMFDxNJTC8AZJ8o8D9fYyH1PNbc5bqzVCTzvuDXPAliKE61WWKo6d0CSL6uHgG4VIIef_eOuGrLE1iTdxO5WnauN3gdnoXJrELndSDIn1t9JZmcdvraq-_ceat4Vv9huHXbpIuif5GdjQCi1DtFkMERI4va1DM1SYwk1CbMGUgqJd1jXutdiuqSqrBDp3eQvh8RE__bN9ilP-aARKe7thKDHvYPCILD14mgsNe6Npbl-ZxVqKHGP4kzJV7APJdUm1x1M0LmHGYN22UIiSzcmvVmq5WgiV-1SkGbR0ZoCHugdYJK6LL5JCo3z7r3th8x3pYlZ1da1d-ZSZSiDI_bxVoauIyi2MyEubmmlYIKTQ6eDTxV1_0fDux9UuKdVU28ugsZt6cOQbznUvMVfhSW0hWeT6XvYCu2IT1FmaQbBs82rpmQ5PIsl2hcPs9wPGHLnkjNNXV_FQHbgAgq_TsvtzBWgJFMouDwOt_JAItCZ0Nc82SXLPGFVbCNQIZ3GhRaMIBFBRucrfOrqTIeXAW20W-kJhewjbuKiMH2hBFRXCsEAxLn2P41a11JvrKLICJyd2jYzvz4_GsesTaHDcUnes2TL7-1e9hEufpyp7rSJ3FOt09q0qIvcByy7FUYf7eGMGOxRD_Uq_ZvU6ITZ0_no7EVviHA0tw3qtvfM3z6qPWqf8uJCs1KzyMnSxbwUydwFgXXoQZPqVXjUibipoP6Pw4B6dNXrUp4_GDs-69g_bc1uHuxFOx9ZaHwP4u9hlf2Ap7S7-2mSZLVLZzEd_4CzsAl2baPKaC2mpsA4M1q51pL3VeO590YGUscRMEtvcUOjBHnYjQ3AvBs5AVI16iAn6hfubTwAhyJzo0DAfOksHnYVTYC43pLwZqdBW14agrrT-Vg_w81opJwuwz-3ByblR0KT_Z52rCsK60OoJ-yj_UTfUg5IiXFYTqEXyBaO3ZqZxO_4TggLJrAqIuM_nfozgbb697Yven3oJK1ABKjBs-55NGRwe2aG3RhzDU_yV5YQuWZnBTsipFWl0KsrmIW7xbO-4I7i6YvKEPjiWkI8ZiCmHFSjHDbS3vks0JRyZPfLqwEK3IUXa_yN_aQV-c0kxRLw-AHC05M5t0Yynd534BFuo6pxeWiRHOX8XoYo9ycTLe8BW2ED_OGOhHufFMX0o7o70lD20yW9zKGUnxWP1oThq380Z6kYzYkuttDG6REvaVyyfh7L8z97SHa7TSHwzkOj3Wko3y5L_jMYZ0=|1647786979|oBucKXOA_abjuajoO3nW5SnKPkYrNpz_MmmNLvZbvAo=",
			"type": "string"
		}
	]
}