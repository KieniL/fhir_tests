{
	"info": {
		"_postman_id": "ef8d72fd-6089-4d65-a18d-ffb5edd7f032",
		"name": "FHIR_Tests",
		"description": "If you have a self-signed certificate like in our tests then you need to go to file/Settings/Certificates/Add Certificate to add the cert to not disable ssl verification on every request.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "OWASP",
			"item": [
				{
					"name": "API1:2019 Broken Object Level Authorization",
					"item": [
						{
							"name": "New Request",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/Patient",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"Patient"
									]
								}
							},
							"response": []
						}
					],
					"description": "Broken Object Level Authorization occurs when a request to an object can be successfully done even if not authorized to the object"
				},
				{
					"name": "API2:2019 Broken User Authentication",
					"item": [
						{
							"name": "New Request",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/Patient",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"Patient"
									]
								}
							},
							"response": []
						}
					],
					"description": "Occurs when authentication mechanism are not implemented correctly and can be abused."
				},
				{
					"name": "API3:2019 Excessive Data Exposure",
					"item": [
						{
							"name": "New Request Copy",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}",
									"host": [
										"{{base_URL}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Occurs when object properties are exposed without checking the data sensitivity and rely on the client to filter only the data they need."
				},
				{
					"name": "API4:2019 Lack of Resources & Rate Limiting",
					"item": [
						{
							"name": "Retrieve Patient 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status Code is 429 --> Rate limiting works\", function () {\r",
											"    pm.response.to.have.status(429) ;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/Patient/1",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"Patient",
										"1"
									]
								},
								"description": "When retrieving a resources multiple times a rate limiting should be triggered at one to not come to the point where the system resources are depleted.\n\nDon't be confused by the test result since every successfull request will result in a test result error since only 429 statuscode is tested for rate limiting.\n\nSo that means if there are some pass results the Rate limiting works since 429 is returned.\n\nThis was tested with 50 iterations and a rate limit of 10 requests per second.\n\nThis is an example of a nginx config with rate limit\n\n```\nhttp {\n\n  limit_req_zone $binary_remote_addr zone=ratelimit:1m rate=10r/s;\n  limit_req_status 429;\n  \n  server {\n    listen 80;\n\n    location / {\n      limit_req zone=ratelimit;\n      proxy_pass http://hapi-fhir-jpaserver-start:8080/;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header X-Forwarded-Proto $scheme;\n      proxy_set_header   Host $http_host;\n    }\n\n      \n  }\n}\n\n```"
							},
							"response": []
						}
					],
					"description": "Occurs when a client can use a lot of the server resources which then leads to DoS and also makes brute force possible.\n\nTo Test this:\n\nGo to API4:2019 Folder.\n\nClick \"Run\"\n\nSelect Iterations\n\nWait for Testresults to return status 429"
				},
				{
					"name": "API5:2019 Broken Function Level Authorization",
					"item": [
						{
							"name": "New Request Copy",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}",
									"host": [
										"{{base_URL}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Occurs when the access control policy is not clear which then leads to administrative access when not in admin mode."
				},
				{
					"name": "API6:2019 Mass Assignment",
					"item": [
						{
							"name": "New Request Copy",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}",
									"host": [
										"{{base_URL}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Occurs when objects from client requests are not filtered by an allowlist and therefore an attack by modifying object properties is possible."
				},
				{
					"name": "API7:2019 Security Misconfiguration",
					"item": [
						{
							"name": "CORS",
							"item": [
								{
									"name": "Basic Origin Reflection Test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"checks if malicious origin is in allowed origin list\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).not.equal(pm.iterationData.get(\"malicious_origin\"))\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"checks allow origin is not star\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).not.equal(\"*\")\r",
													"});\r",
													"\r",
													"pm.test(\"checks allow credential is disabled\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Credentials\")).to.be.oneOf([undefined,'false'])\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_URL}}/Patient/1",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient",
												"1"
											]
										},
										"description": "Go To the CORS Folder and click run.\n\nSelect the file testfiles/malicious_origin.csv with a delay (due to ratelimiting) and check if you don't use allow origin all or a malicious origin"
									},
									"response": []
								},
								{
									"name": "Trusted null Origin Test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"checks allow origin not null\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).not.equal(\"null\")\r",
													"});\r",
													"\r",
													"pm.test(\"checks allowed origin exist\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).exist\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "null",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_URL}}/Patient/1",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient",
												"1"
											]
										},
										"description": "Run test directly to check if the server has allow origin set"
									},
									"response": []
								}
							],
							"description": "Taken from: [https://www.postman.com/postman/workspace/postman-security-workspace/collection/5917351-b6f22d43-2a6f-4ee3-a12e-617127987caf](https://www.postman.com/postman/workspace/postman-security-workspace/collection/5917351-b6f22d43-2a6f-4ee3-a12e-617127987caf)"
						},
						{
							"name": "Security Headers",
							"item": [
								{
									"name": "Security Headers Test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('checks for Content-Security-Policy header', function () {\r",
													"  pm.expect(pm.response.headers.get('Content-Security-Policy')).not.equal(undefined);\r",
													"});\r",
													"\r",
													"pm.test(\"checks for X-Frame-Options header\", function() {\r",
													"    const header = pm.response.headers.get(\"X-Frame-Options\")||\"\"\r",
													"    pm.expect(header).equal('DENY')\r",
													"});\r",
													"\r",
													"pm.test(\"checks for Strict-Transport-Security header\", function() {\r",
													"    const header = pm.response.headers.get(\"Strict-Transport-Security\")||\"\"\r",
													"    pm.expect(header.toLowerCase()).contains(\"max-age\")\r",
													"});\r",
													"\r",
													"pm.test(\"checks for X-XSS-Protection header\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"X-XSS-Protection\")).not.equal(undefined)\r",
													"});\r",
													"\r",
													"pm.test(\"checks for Expect-CT header\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Expect-CT\")).not.equal(undefined)\r",
													"});\r",
													"\r",
													"pm.test(\"checks for X-Content-Type-Options\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"X-Content-Type-Options\")).not.equal(undefined)\r",
													"});\r",
													"\r",
													"pm.test(\"checks for Referrer-Policy\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Referrer-Policy\")).not.equal(undefined)\r",
													"});\r",
													"\r",
													"pm.test(\"checks for Permissions-Policy\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Permissions-Policy\")).not.equal(undefined)\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_URL}}/Patient/1",
											"host": [
												"{{base_URL}}"
											],
											"path": [
												"Patient",
												"1"
											]
										},
										"description": "You can run this test directly"
									},
									"response": []
								}
							],
							"description": "This Test check for some security headers to set in your config.\n\nExample nginx can be seen here:\n\n```\nadd_header 'Access-Control-Allow-Origin' 'localhost';\nadd_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, OPTIONS';\nadd_header Content-Security-Policy \"default-src 'self';\";\nadd_header X-Frame-Options \"DENY\";\nadd_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\nadd_header X-XSS-Protection \"1; mode=block\";\nadd_header Expect-CT \"enforce, max-age=300, report-uri='https://localhost/'\";\nadd_header X-Content-Type-Options nosniff;\nadd_header 'Referrer-Policy' 'strict-origin-when-cross-origin';\nadd_header Permissions-Policy \"geolocation=(),midi=(),sync-xhr=(),microphone=(),camera=(),magnetometer=(),gyroscope=(),fullscreen=(self),payment=()\";\n\n```"
						}
					],
					"description": "Occurs when the configuration is incompleted of misconfigured (HTTP Headers, HTTP Methods, CORS,...)"
				},
				{
					"name": "API8:2019 Injection",
					"item": [
						{
							"name": "New Request Copy",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}",
									"host": [
										"{{base_URL}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Occurs when input is not validated and makes injectsion like SQL or command injections possible."
				},
				{
					"name": "API9:2019 Improper Assets Management",
					"item": [],
					"description": "Occurs when endpoints are exposed which doesn't need to be exposed which makes it easier for attackers to gain information.\n\nCan't be automated tested since you need to have an up-to-date inventory of you API's.\n\nYou need to restric API access and also access to production data.\n\nYou need to retire old API's.\n\netc."
				},
				{
					"name": "API10:2019 Insufficient Logging & Monitoring",
					"item": [],
					"description": "Occurs when logging and monitoring is not complete or integrated into incident response which makes attacks less likely to be discovered.\n\nCan't be tested with Postman so you need to send other requests and then check for logs.\n\nCheck that the requestor is logged with the sourceIP an action which was made with a timestamp.\n\nAdditionally, an incident response and disaster recovery need to be in-place to have a recovery mechanism.\n\nYou also need to make sure that the logging solution does not log only sensitive data which could be extracted by an attacker."
				}
			],
			"description": "Collection of Requests to test OWASP API Top 10 [https://owasp.org/www-project-api-security/](https://owasp.org/www-project-api-security/)"
		},
		{
			"name": "TLS",
			"item": [
				{
					"name": "Check if TLS 1.0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status Code is 200\", function () {\r",
									"    pm.response.to.have.status(200) ;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"tlsDisabledProtocols": [
							"TLSv1_1",
							"TLSv1_2",
							"TLSv1_3"
						]
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_URL}}/Patient",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"Patient"
							]
						},
						"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
					},
					"response": []
				},
				{
					"name": "Check if TLS 1.1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status Code is 200\", function () {\r",
									"    pm.response.to.have.status(200) ;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"tlsDisabledProtocols": [
							"TLSv1",
							"TLSv1_2",
							"TLSv1_3"
						]
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_URL}}/Patient",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"Patient"
							]
						},
						"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
					},
					"response": []
				},
				{
					"name": "Check if TLS >= 1.2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status Code is 200\", function () {\r",
									"    pm.response.to.have.status(200) ;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"tlsDisabledProtocols": [
							"TLSv1",
							"TLSv1_1"
						]
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_URL}}/Patient",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"Patient"
							]
						},
						"description": "When retrieving a resource over TLS at least version 1.2 should be used. So that means"
					},
					"response": []
				}
			],
			"description": "When accessing or changing data HTTPS should be used with TLS Version of at least 1.2.\n\nThe following three requests are checking TLS versions.\n\nThe 1.0 should fail if you have configured the server to use >= 1.2\n\nThe 1.1 should fail if you have configured the server to use >= 1.2\n\nThe > 1.2 should be sucessfull if you have configured the server to use >= 1.2\n\nFollowing nginx configuration is an example for setting the tls versions\n\n```\nserver {\n    listen 443 ssl;\n    ssl_certificate     /etc/nginx/localhost.crt;\n    ssl_certificate_key /etc/nginx/localhost.key;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n\n    location / {\n      limit_req zone=ratelimit;\n      proxy_pass http://hapi-fhir-jpaserver-start:8080/;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header X-Forwarded-Proto $scheme;\n      proxy_set_header   Host $http_host;\n    } \n  }\n\n```"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_URL",
			"value": "https://localhost/fhir",
			"type": "string"
		}
	]
}